<?php
namespace Center\Controller;

use Admin\Controller\BaseAdminController;
use Common\Controller\BaseNavController;
use Think\Controller;

/**
 * Class IndexController
 * @package Home\Controller
 */
class ExamController extends BaseAdminController//继承 baseHomeController，统一设置用户信息、顶部栏信息
{
    function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->set_sidebar_module('App');
        $this->set_sidebar_sub('Exam');
    }




    /***
     * 设置为发布状态
     * @param $id
     */
    public function ajaxDoPublish($id)
    {

        $exam = D('Exam')->find($id);
        $this->_checkExamStatus($exam);


        $subjects = D('ExamSubjectView')->findAllByExam($exam);

        //判断能否自动改卷,如果全部是标题和选择题的话，标记为自动批改
        $autoCorrect = 0;
        foreach ($subjects as $subject) {
            $type_num = $subject['type_num'];
            if ($type_num == 'choice' || $type_num == 'singleChoice' || $type_num == 'text') {

            } else {
                $autoCorrect = 1;
                break;
            }
        }


        $exam['auto_correct'] = $autoCorrect;
        $exam['status'] = 1;
        $exam['update_time'] = time();
        $exam['publish_time'] = time();
        D('Exam')->save($exam);
        $this->ajaxMsg(0, 'success');
    }


    #测试列表
    public function index()
    {
        $page = D('Center/ExamView')->findMyPageByUid(uid());
        $this->assign('courses', D('Common/Course')->where('status = 1')->order('sort desc')->select());
        $room_model = M('StudyRoom');
        $condition = 'uid=' . uid() . '  and status > -1';
        $rooms = $room_model->where($condition)->order('update_time desc')->select();
        $this->assign('rooms', $rooms);
        $this->assign('page', $page);
        $this->setCenterNav('exam');
        $this->setTitle("测试管理");
        $this->display();
    }

    #发布取消发布测试
    public function changeExam()
    {

            $id = $_GET['id'];
            $exam_model = M('Exam');
            $condition = 'uid=' . uid() . ' and id=' . $id . ' and status > -1';
            $exam = $exam_model->where($condition)->find();
            if ($exam) {
                $examModel = D('Exam');
                if ($exam['status'] == 0) {
                    $exam['status'] = 1;
                } elseif ($exam['status'] == 1) {
                    $exam['status'] = 0;
                }
                $examModel->save($exam);
            } else {
            }
            $this->redirect('index', array('p' => $_GET['p']));


    }

    /**
     * 移除
     */
    public function ajaxRemoveSubject()
    {
        $id = I('id');
        $subject = D('ExamSubject')->find($id);

        //判断试卷状态能否操作
        $examModel = D('Exam');
        $examId = $subject['exam_id'];
        $exam = $examModel->find($examId);
        $this->_checkExamStatus($exam);

        if ($subject) {
            if ($subject['status'] == 0) {
                D('ExamSubject')->delete($id);
            } else {
                $subject['status'] = -1;
                D('ExamSubject')->save($subject);
            }
            if ($examId) {
                $exam = $examModel->removeSubjectId($exam, $subject);
                $examModel->save($exam);
            }
            $this->ajaxMsg(0, 'success', $subject);
        } else {
            $this->ajaxMsg(1, '抱歉，没有找到对应的题目');
        }
    }

    public function ajaxShowCorrectStatus($examId)
    {

        $examModel = D('Exam');
        $exam = $examModel->find($examId);
        if ($exam) {
            $status = $exam['show_correct_status'];

            if ($status == 1)
                $status = 0;
            elseif ($status == 0)
                $status = 1;
            $exam['show_correct_status'] = $status;
            $examModel->save($exam);
            ajaxMsg(0, '');
        } else {
            ajaxMsg(1, '抱歉，没有找到你的试卷');
        }
    }

    public function ajaxUpSubject()
    {
        $id = I('id');
        $subject = D('ExamSubject')->find($id);

        //判断试卷状态能否操作
        $examModel = D('Exam');
        $examId = $subject['exam_id'];
        $exam = $examModel->find($examId);
        $this->_checkExamStatus($exam);

        if ($subject) {
            $exam = $examModel->upSubjectId($exam, $subject);
            $examModel->save($exam);
            $this->ajaxMsg(0, 'success', $subject);
        } else {
            $this->ajaxMsg(1, '抱歉，没有找到对应的题目');
        }
    }

    public function ajaxDownSubject()
    {
        $id = I('id');
        $subject = D('ExamSubject')->find($id);

        //判断试卷状态能否操作
        $examModel = D('Exam');
        $examId = $subject['exam_id'];
        $exam = $examModel->find($examId);
        $this->_checkExamStatus($exam);

        if ($subject) {
            $exam = $examModel->downSubjectId($exam, $subject);
            $examModel->save($exam);
            $this->ajaxMsg(0, 'success', $subject);
        } else {
            $this->ajaxMsg(1, '抱歉，没有找到对应的题目');
        }
    }

    public function ajaxInsertSubject($type, $id, $exam_id=null,$is_add)
    {
        if($is_add == 'false'){
            $subjectPre = D('ExamSubject')->find($id);
            $exam_id = $subjectPre['exam_id'];
        }


        $subjectType = D('ExamSubjectType')->findByType($type);
        if ($exam_id && $subjectType) {
            $examModel = D('Exam');
            $exam = $examModel->find($exam_id);
            //判断试卷状态能否操作
            $this->_checkExamStatus($exam);

            $subject = array(
                'create_time' => time(),
                'update_time' => time(),
                'uid' => uid() ? uid() : 0,
                'type_id' => $subjectType['id'],
                'exam_id' => $exam_id,
            );
            //设置默认值
            if ($type == 'text') {//如果是简答题
                $subject['title'] = "";
            } elseif ($type == 'choice') {//如果是多选题
                $subject['score'] = 1;
                $subject['title'] = '';
                $subject['right_answer'] = '[1,0,0,0]';
                $subject['content'] = '["","","",""]';

                $subject['right_answer_str'] = "A";
            } elseif ($type == 'singleChoice') {//如果是单选题
                $subject['score'] = 1;
                $subject['title'] = '';
                $subject['right_answer'] = '[1,0,0,0]';
                $subject['content'] = '["","","",""]';

                $subject['right_answer_str'] = "A";
            } elseif ($type == 'blank') {//如果是填空题
                $subject['score'] = 1;
                $subject['content'] = "";
                $subject['show_content'] = "";
                $subject['answer_count'] = 0;
            } elseif ($type == 'answer') {//如果是简答题
                $subject['score'] = 1;
                $subject['content'] = "";
                $subject['show_content'] = "";
            }
            $subject['remark'] = '';
            $subject['type_num'] = $type;
            //添加题目
            $id2 = D('ExamSubject')->add($subject);

            //考试添加题目id上去
            $subject['id'] = $id2;

            if($subject){
                if($is_add == 'false'){//如果是插入
                    $exam = $examModel->insertSubjectId($exam, $id, $subject);
                    $examModel->save($exam);
                }else{//添加
                    $exam = $examModel->addSubjectId($exam, $subject);
                    $examModel->save($exam);
                }
            }

            $this->ajaxMsg(0, 'success', $subject);
        } else {
            $this->ajaxMsg(1, '抱歉，没有找到对应的创建类型');
        }
    }

    //已经抛弃了不用了
    public function ajaxAddSubject($type, $examId, $copyId = null)
    {
        $subjectType = D('ExamSubjectType')->findByType($type);
        if ($subjectType) {
            $examModel = D('Exam');
            $exam = $examModel->find($examId);
            //判断试卷状态能否操作
            $this->_checkExamStatus($exam);

            $subject = array(
                'create_time' => time(),
                'update_time' => time(),
                'uid' => uid() ? uid() : 0,
                'type_id' => $subjectType['id'],
                'exam_id' => $examId,
                'copy_id' => $copyId
            );
            //设置默认值
            if ($type == 'text') {//如果是简答题
                $subject['title'] = "标题内容";
            } elseif ($type == 'choice') {//如果是多选题
                $subject['score'] = 1;
                $subject['title'] = '填写多选题问题';
                $subject['right_answer'] = '[1,0,0,0]';
                $subject['content'] = '["填写答案A","填写答案B","填写答案C","填写答案D"]';
            } elseif ($type == 'singleChoice') {//如果是单选题
                $subject['score'] = 1;
                $subject['title'] = '填写多选题问题';
                $subject['right_answer'] = '[1,0,0,0]';
                $subject['content'] = '["填写答案A","填写答案B","填写答案C","填写答案D"]';
            } elseif ($type == 'blank') {//如果是填空题
                $subject['score'] = 1;
                $subject['content'] = "填空题内容";
            } elseif ($type == 'answer') {//如果是简答题
                $subject['score'] = 1;
                $subject['content'] = "简答题内容";
            }

            //添加题目
            $id = D('ExamSubject')->add($subject);

            //考试添加题目id上去
            $subject['id'] = $id;
            $exam = $examModel->addSubjectId($exam, $subject);
            $examModel->save($exam);

            $this->ajaxMsg(0, 'success', array('id' => $id, 'type' => $type));
        } else {
            $this->ajaxMsg(1, '抱歉，没有找到对应的创建类型');
        }
    }

    public function ajaxEditText($id, $title)
    {
        $subject = D('ExamSubjectView')->find($id);

        //判断试卷状态能否操作
        $examModel = D('Exam');
        $examId = $subject['exam_id'];
        $exam = $examModel->find($examId);
        $this->_checkExamStatus($exam);

        if ($subject) {
            $subjectModel = D('ExamSubject');
            $temp = $subjectModel->create($_POST);
            if ($temp) {
                $subject['status'] = 1;
                $subject['title'] = $title;
                $subject['remark'] = $_POST['remark'];
                $subject['update_time'] = time();
                D('ExamSubject')->save($subject);

                if ($exam) {
                    $exam = $examModel->changeSubject($exam, $subject);
                    $examModel->save($exam);
                }


                $this->ajaxMsg(0, 'success', $subject);
            } else {
                $this->ajaxMsg(1, $subjectModel->getError());
            }
        } else {
            $this->ajaxMsg(1, '抱歉，没有找到对应的题目');
        }
    }

    public function ajaxEditSingle($id, $title, $score = 1, $is_answer, $choice)
    {

        if ((int)$is_answer > 3 || (int)$is_answer < 0) {
            $this->ajaxMsg(1, '请提交正确格式的内容');
        }

        $subject = D('ExamSubjectView')->find($id);

        //判断试卷状态能否操作
        $examModel = D('Exam');
        $examId = $subject['exam_id'];
        $exam = $examModel->find($examId);
        $this->_checkExamStatus($exam);

        $right_answer = array(0, 0, 0, 0);
        $right_answer[(int)$is_answer] = 1;

        if ($subject) {

            $subjectModel = D('ExamSubject');
            $temp = $subjectModel->create($_POST);
            if ($temp) {
                $subject['status'] = 1;
                $subject['title'] = $title;
                $subject['score'] = (int)$score > 0 ? (int)$score : 1;
                $subject['content'] = json_encode($choice, true);
                $subject['remark'] = $_POST['remark'];
                $subject['right_answer'] = json_encode($right_answer, true);
                $subject['update_time'] = time();
                D('ExamSubject')->save($subject);


                if ($exam) {
                    $exam = $examModel->changeSubject($exam, $subject);
                    $examModel->save($exam);
                }

                $right_answerStr = array('A', 'B', 'C', 'D');
                $subject['right_answer_str'] = $right_answerStr[(int)$is_answer];
                $this->ajaxMsg(0, 'success', $subject);
            } else {
                $this->ajaxMsg(1, $subjectModel->getError());
            }

        } else {
            $this->ajaxMsg(1, '抱歉，没有找到对应的题目');
        }
    }

    public function ajaxEditChoice()
    {
        $id = I('id');
        $title =$_POST['title'];
        $score = I('score');
        $choice = I('choice');
        $answer = I('is_answer');
        if ($answer) {
            $len = sizeof($answer);
        } else {
            $len = 0;
        }

        if ($len == 0) {
            $this->ajaxMsg(1, "请至少选择一个正确答案");
        }
        $subject = D('ExamSubjectView')->find($id);

        $right_answer = array(0, 0, 0, 0);
        foreach ($answer as $index) {
            $right_answer[$index] = 1;
        }

        //判断试卷状态能否操作
        $examModel = D('Exam');
        $examId = $subject['exam_id'];
        $exam = $examModel->find($examId);
        $this->_checkExamStatus($exam);

        if ($subject) {
            $subject['status'] = 1;
            $subject['title'] = $title;
            $subject['remark'] = $_POST['remark'];
            $subject['score'] = $score;
            $subject['content'] = json_encode($choice, true);
            $subject['right_answer'] = json_encode($right_answer, true);
            $subject['update_time'] = time();
            D('ExamSubject')->save($subject);


            if ($exam) {
                $exam = $examModel->changeSubject($exam, $subject);
                $examModel->save($exam);
            }

            $right_answerStr = array('A', 'B', 'C', 'D');
            $show = "";
            foreach ($answer as $index => $value) {
                if ($index < $len - 1) {
                    $show = $show . $right_answerStr[$value] . '、';
                } else {
                    $show = $show . $right_answerStr[$value];
                }
            }

            $subject['right_answer_str'] = $show;
            $this->ajaxMsg(0, 'success', $subject);
        } else {
            $this->ajaxMsg(1, '抱歉，没有找到对应的题目');
        }
    }

    public function ajaxEditBlank()
    {
        $id = $_POST['id'];
        $score = $_POST['score'];
        $answer = $_POST['answer'];
        $content =$_POST['content'];
//        $answer = htmlspecialchars_decode($answer);


        //判断是否有空的答案
        $len = 1;
        $objA = json_decode($answer, JSON_UNESCAPED_UNICODE);
        if ($objA) {
            foreach ($objA as $oo) {
                if ($oo == "") {
                    $len = 0;
                }
            }
        } else {
            $len = 0;
        }

        if ($len == 0) {
            $this->ajaxMsg(1, "所有填空必须填写答案并保证至少有一个填空");
        }
        $subject = D('ExamSubjectView')->find($id);


        //判断试卷状态能否操作
        $examModel = D('Exam');
        $examId = $subject['exam_id'];
        $exam = $examModel->find($examId);
        $this->_checkExamStatus($exam);

        if ($subject) {
            $subject['status'] = 1;
            $subject['remark'] = $_POST['remark'];
            $subject['score'] = $score;
            $subject['content'] = $content;
            $subject['right_answer'] = $answer;
            $subject['update_time'] = time();
         
            D('ExamSubject')->save($subject);

            if ($exam) {
                $exam = $examModel->changeSubject($exam, $subject);
                $examModel->save($exam);
            }

            $answerCount = substr_count($content, 'input-blank');
            $subject['answer_count'] = $answerCount;
//            $subject['content'] = htmlspecialchars_decode($subject['content']);

            $subject = $this->_getShoBlank($subject);
            $this->ajaxMsg(0, 'success', $subject);
        } else {
            $this->ajaxMsg(1, '抱歉，没有找到对应的题目');
        }
    }

    public function ajaxEditAnswer($id, $score, $content)
    {

        $subject = D('ExamSubjectView')->find($id);

        //判断试卷状态能否操作
        $examModel = D('Exam');
        $examId = $subject['exam_id'];
        $exam = $examModel->find($examId);
        $this->_checkExamStatus($exam);

        if ($subject) {

            $subjectModel = D('ExamSubject');
            $temp = $subjectModel->create($_POST);
            if ($temp) {
                $subject['status'] = 1;
                $subject['score'] = $score;
                $subject['remark'] = $_POST['remark'];
                $subject['content'] = $content;
                $subject['update_time'] = time();
                D('ExamSubject')->save($subject);


                if ($exam) {
                    $exam = $examModel->changeSubject($exam, $subject);
                    $examModel->save($exam);
                }

                $subject['content'] = htmlspecialchars_decode($subject['content']);
                $this->ajaxMsg(0, 'success', $subject);
            } else {
                $this->ajaxMsg(1, $subjectModel->getError());
            }

        } else {
            $this->ajaxMsg(1, '抱歉，没有找到对应的题目');
        }
    }

    public function ajaxFinishCorrect($examPaperId)
    {

        $examPaperModel = D('ExamPaper');
        $examPaper = $examPaperModel->find($examPaperId);

        if ($examPaper) {
            $exam = D('Exam')->find($examPaper['exam_id']);
            $this->_checkExamStatus($exam);//检测权限


            if ($examPaper['is_corrected'] == 0) {//当第一题提交批改
                //将题目得分统计如每道题里
                $scores = $examPaperModel->getScores($examPaper);
                $subjectMode = D('ExamSubject');
                foreach ($scores as $subjectId => $score) {
                    $subject = $subjectMode->find((int)$subjectId);
                    if ($subject) {
                        if ($score > 0) {
                            $subject['answer_right_count'] = $subject['answer_right'] + 1;
                            $subject['answer_score'] = $subject['answer_score'] + $score;
                        }
                        $subject['answer_count'] = $subject['answer_count'] + 1;
                        $subjectMode->save($subject);
                    }

                }
            }

            //消息生成
            $messageFun = $examPaper['status'] ? 'exam_re_correct_message' : 'exam_correct_message';
            D("Message/Message")->$messageFun(uid(), $examPaper['uid'], $examPaper['exam_id']);


            //改变对应题目的分数并重新计算试卷分数
            $examPaper['is_corrected'] = 1;
            $examPaperModel->save($examPaper);

//            $examPaperModel = D('ExamPaperView');
//                $paper = $examPaperModel->findNext($examPaper['exam_id']);
            $this->ajaxMsg(0, 'success');
//            $paper = $examPaperModel->findNextByPaperId($examPaper['exam_id'], $examPaperId);
//            if ($paper) {
//                $this->ajaxMsg(0, 'success');
//            } else {
//                $this->ajaxMsg(1, '您已经批改完所有参考者的试卷了');
//            }


        } else {
            $this->ajaxMsg(1, '抱歉你操作的试卷走丢了');
        }
    }

    public function ajaxGetLastPaper($examPaperId)
    {


        $examPaperModel = D('ExamPaperView');
        $examPaper = $examPaperModel->find($examPaperId);
        if ($examPaper) {
            $paper = $examPaperModel->findLastByPaperId($examPaper['exam_id'], $examPaperId);
            if ($paper) {
                $this->ajaxMsg(0, 'success');
            } else {
                $this->ajaxMsg(1, '没有上一份了');
            }


        } else {
            $this->ajaxMsg(1, '抱歉你操作的试卷走丢了');
        }
    }

    /**
     * @param $examPaperId
     * @param $subjectId
     * @param  $score [0,1,2] 数组方式
     */
    public function ajaxDoCorrect($examPaperId, $subjectId, $score = array(0))
    {
//        $this->ajaxMsg(1, to_json_string($_POST));
        $examPaperModel = D('ExamPaper');
        $examPaper = $examPaperModel->find($examPaperId);
        if ($examPaper) {
            $exam = D('Exam')->find($examPaper['exam_id']);
            $this->_checkExamStatus($exam);//检测权限

            //计算每题得分
            if ($examPaper['is_corrected'] == 1) {//当已经批改过了
                $scores = $examPaperModel->getScores($examPaper);
                $subjectMode = D('ExamSubject');
                $subject = $subjectMode->find((int)$subjectId);
                if ($subject) {
                    $oldScore = $scores[$subjectId . ''] ? $scores[$subjectId . ''] : 0;

                    $suScore = 0;
                    if (is_array($score)) {
                        foreach ($score as $s) {
                            $suScore = $suScore + $s;
                        }
                    }else{
                        $suScore =  $score;
                    }
//                    ajaxMsg(1,to_json_string($scores));
                    if ($oldScore != $suScore) {
                        if ($oldScore > 0) {//还原原来分数
                            $subject['answer_right_count'] = $subject['answer_right'] - 1;
                            $subject['answer_score'] = $subject['answer_score'] - $oldScore;
                        }

                        if ($suScore > 0) {
                            $subject['answer_right_count'] = $subject['answer_right'] + 1;
                            $subject['answer_score'] = $subject['answer_score'] + $suScore;
                        }
                        $subjectMode->save($subject);
                    }
                }

            }

            //改变对应题目的分数并重新计算试卷分数
            $examPaper = $examPaperModel->changeScore($examPaper, $subjectId, $score);

            $examPaperModel->save($examPaper);
            $this->ajaxMsg(0, 'success', $examPaper['exam_score']);
        } else {
            $this->ajaxMsg(1, '抱歉你操作的试卷走丢了');
        }
    }

    public function correct($correctType, $examId = 0)
    {
        $entryType=I("entryType","correct");
        $paperId = I('examPaperId', 0);
        $examPaperModel = D('ExamPaperView');
        if ($correctType == 'last') {
            if ($paperId != 0) {
                $paper = $examPaperModel->findLastByPaperId($examId, $paperId);

                $paper2 = $examPaperModel->findLastByPaper($examId, $paper);
                if ($paper2) {
                    $this->assign('hasLast', true);
                }
            } else {
                $paper = $examPaperModel->findNext($examId);
                $paper2 = $examPaperModel->findLastByPaper($examId, $paper);
                if ($paper2) {
                    $this->assign('hasLast', true);
                }
            }
            if ($paper) {
                $examId = $paper['exam_id'];
                $paper3 = $examPaperModel->findNextByPaper($examId, $paper);
                if ($paper3) {
                    $this->assign('hasNext', true);
                }
            } else {
                $this->assign('finishCorrect', '您已经批改完所有参考者的试卷了');
            }

        } elseif ($correctType == 'next') {
            if ($paperId != 0) {
                $paper = $examPaperModel->findNextByPaperId($examId, $paperId);

                $paper2 = $examPaperModel->findNextByPaper($examId, $paper);
                if ($paper2) {
                    $this->assign('hasNext', true);
                }
            } else {
                $paper = $examPaperModel->findNext($examId);

                if(!$paper){ $exam = D('ExamView')->find($examId);
                    $this->assign('exam', $exam);
                    $this->assign('entryType',$entryType);
                    $this->assign('is_show', false);
                    $this->assign('show_title', '抱歉，该试卷无人答题，暂无答卷批改。');
                    $this->display();
                    exit;
                }

                $paper2 = $examPaperModel->findNextByPaper($examId, $paper);
                if ($paper2) {
                    $this->assign('hasNext', true);
                }
            }


            if ($paper) {
                $examId = $paper['exam_id'];
                $paper3 = $examPaperModel->findLastByPaper($examId, $paper);
                if ($paper3) {
                    $this->assign('hasLast', true);
                }
            } else {

                $this->assign('finishCorrect', '您已经批改完所有参考者的试卷了');
            }

        } else if($correctType == 'correct'){
            $paper = $examPaperModel->findById($paperId);
            $examId = $paper['exam_id'];
            $paper2 = $examPaperModel->findLastByPaper($examId, $paper);
            if ($paper2) {
                $this->assign('hasLast', true);
            }

            $paper3 = $examPaperModel->findNextByPaper($examId, $paper);
            if ($paper3) {
                $this->assign('hasNext', true);
            }
        }
        $exam = D('ExamView')->find($examId);
        $this->assign('exam', $exam);
        $this->assign('entryType',$entryType);

        if ($paper) {//如果试卷存在

            $this->_checkExamStatusPage($exam, 'correct');//检测权限

            $subjects = D('ExamSubjectView')->findAllByExam($exam);

            $userScore = to_json_obj($paper['answer_scores']);
            $userAnswer = to_json_obj($paper['answers']);


            foreach ($subjects as $index => $subject) {
                /***********放入用户答案**********/
                $subject['user_score'] = $userScore['' . $subject['id']];
                $subject['user_answer'] = $userAnswer['' . $subject['id']];

                /***********放入原题内容**********/
                if ($subject['type_num'] == 'choice') {//如果是多选题

                    //用户回答
                    $userA = array(0, 0, 0, 0);
                    foreach ($userAnswer['' . $subject['id']] as $select) {
                        $userA[(int)$select] = 1;
                    }
                    $subject['user_answer'] = $userA;

                    //解析显示的正确答案(A、B、C)
                    $right_answerStr = array('A', 'B', 'C', 'D');
                    $show = "";
                    $answer = json_decode($subject['right_answer']);
                    $right_answerS = array();
                    $righr_answer_indexs = array();
                    foreach ($answer as $index2 => $value) {
                        if ($value == 1) {
                            $righr_answer_indexs[(string)$index2] = 1;
                            array_push($right_answerS, $right_answerStr[$index2]);
                        }
                    }
                    $len = sizeof($right_answerS);
                    foreach ($right_answerS as $index2 => $s) {
                        if ($index2 < $len - 1) {
                            $show = $show . $s . '、';
                        } else {
                            $show = $show . $s;
                        }
                    }
                    $subject['right_answer_str'] = $show;
                    $subject['righr_answer_indexs'] = $righr_answer_indexs;

                    //解析答案内容
                    $subject['answer'] = json_decode($subject['content'], true);
                } elseif ($subject['type_num'] == 'singleChoice') {//如果是单选题

                    //用户回答
                    $subject['user_answer'] = $userAnswer['' . $subject['id']];

                    //解析显示正确答案(A)
                    $right_answerStr = array('A', 'B', 'C', 'D');
                    $answer = json_decode($subject['right_answer'], true);
                    $righr_answer_indexs = array();
                    foreach ($answer as $index2 => $value) {
                        if ($value == 1) {
                            $righr_answer_indexs[(string)$index2] = 1;
                            $show = $right_answerStr[$index2];
                        }
                    }
                    $subject['right_answer_str'] = $show;
                    $subject['righr_answer_indexs'] = $righr_answer_indexs;

                    //解析答案内容
                    $subject['answer'] = json_decode($subject['content'], true);
                } elseif ($subject['type_num'] == 'blank') {//如果是填空题

                    //用户回答
                    $subject['user_answer'] = $userAnswer['' . $subject['id']];

                    //解析html 转义字符
                    $answerCount = substr_count($subject['content'], 'input-blank');
                    $subject['answer_count'] = $answerCount;
                    $subject['content'] = $subject['content'] ? htmlspecialchars_decode($subject['content']) : "";

                    $answer = to_json_obj($subject['right_answer']);
                    $righA = "";
                    $userAnswerS = "";
                    $showContent = $subject['content'];
                    foreach ($answer as $index2 => $value) {
                        $ua = $subject['user_answer'][$index2];
                        if (!$ua) {
                            $ua = "&nbsp;&nbsp;";
                        }
                        $showContent = str_replace("value=\"" . $value . "\"", "value=\"" . $ua . "\" style=\"display:none\"", $showContent);
                        $userAnswerS = $userAnswerS . "<span style='padding: 0 10px;border-bottom: 1px solid black;margin-left: 10px;margin-right: 10px'>" . $ua . "</span>";
                        $righA = $righA . '<span style="display:block">' . ($index2 + 1) . '.' . $value . "</span>";
                        $subject['content'] = str_replace("value=\"" . $value . "\"", "value=\"" . $ua . "\"", $subject['content']);

                        $righA = $righA . '<span style="display:block">' . ($index2 + 1) . '.' . $value . "</span>";
                    }
                    $subject['show_content'] = str_replace_once("<input class=", $userAnswerS . "<input class=", $showContent);


                    $subject['right_answer_str'] = $righA;


                } elseif ($subject['type_num'] == 'answer') {//如果是简答题
                    //解析html 转义字符
                    $subject['content'] = $subject['content'] ? htmlspecialchars_decode($subject['content']) : "";
                    $subject['user_answer'][0] = $subject['user_answer'][0] ? htmlspecialchars_decode($subject['user_answer'][0]) : "";
                }

                //重新赋值
                $subjects[(int)$index] = $subject;
            }


            $this->assign('examPaper', $paper);
            $this->assign('subjects', $subjects);

            $showname = show_name($paper, 'user_');
            $this->setTitle("批改 " . $showname . ' 的测试');

        } else {
            $this->assign('entryType',$entryType);
            $this->assign('is_show', false);
            $this->assign('show_title', '抱歉，没有找到你要批改的试卷');
        }
        $this->display();
    }

    #删除测试
    public function deleteExam()
    {
        $id = $_GET['id'];
        $exam_model = M('Exam');
        $condition = 'uid=' . uid() . ' and id=' . $id . ' and status > -1';
        $exam = $exam_model->where($condition)->find();
        if ($exam) {
            $examModel = D('Exam');
            $exam['status'] = -1;
            $examModel->save($exam);
        } else {
        }
        $this->redirect('index', array('p' => $_GET['p']));
    }

    #新增测试
    public function ajaxAddExam($title, $room_id, $course_id, $intro)
    {
        check_certification_status();
        $exam_model = D('Exam');
        $exam = $exam_model->create($_POST);
        $room_model = D('StudyRoom');
        $condition = 'uid=' . uid() . ' and id=' . $room_id;
        $room = $room_model->where($condition)->find();
        if ($exam && $room) {
            $exam = array();
            $exam['course_id'] = $course_id;
            $exam['room_id'] = $room_id;
            $exam['title'] = $title;
            $exam['intro'] = $intro;
            $exam['grade_id'] = $room["grade_id"];
            $exam['city_id'] = current_city_id();
            $exam['uid'] = uid();
            $exam['publish_time'] = time();
            $exam['create_time'] = time();
            $exam['update_time'] = time();
            $id = $exam_model->add($exam);
            $this->ajaxMsg(0, '新建成功。', $id);
        } else {
            $this->ajaxMsg(1, '新建失败。');
        }
    }

    #修改测试基本信息
    public function ajaxExamChangeInfo($title, $id, $course_id, $type_name, $intro, $room_id)
    {
        $exam_model = M('Exam');
        $condition = 'uid=' . uid() . ' and id=' . $id . ' and status > -1';
        $exam = $exam_model->where($condition)->find();
        if ($exam) {
            $examModel = D('Exam');
            $exam['title'] = $title;
            $exam['course_id'] = $course_id;
            $exam['type_name'] = $type_name;
            $exam['intro'] = $intro;
            $exam['room_id'] = $room_id;
            $examModel->save($exam);
            $this->ajaxMsg(0, '修改成功。', $id);
        } else {
            $this->ajaxMsg(1, '修改失败，测试不存在。');
        }
    }

    #答题名单
    public function answerers()
    {
        $exam_id = $_GET[id];
        $exam_model = M('Exam');
        $exam = $exam_model->where(array('uid' => uid(), 'id' => $exam_id))->find();
        if ($exam) {
            $page = D('Center/ExamPaperView')->findMyPageByUid($exam_id);

            //统计已批改的平均分
            $avgScore = D('ExamPaper')->where(array('exam_id' => $exam_id, 'is_corrected' => 1))->avg('exam_score');
            $exam['avg_score'] = $avgScore;
            //统计及格人数
            $passScore = $exam['score'] * 0.6;
            $passCount = D('ExamPaper')->where(
                array('exam_id' => $exam_id, 'exam_score' => array('egt', $passScore), 'is_corrected' => 1)
            )->count();
            $exam['pass_count'] = $passCount;
            //统计已经批改
            $exam['corrected_count'] = D('ExamPaper')->where(
                array('exam_id' => $exam_id, 'is_corrected' => 1)
            )->count();
            //统计优秀人数
            $goodScore = $exam['score'] * 0.8;
            $goodCount = D('ExamPaper')->where(
                array('exam_id' => $exam_id, 'exam_score' => array('egt', $goodScore), 'is_corrected' => 1)
            )->count();
            $exam['good_count'] = $goodCount;
            $this->assign('exam', $exam);

            $this->assign('page', $page);
            $this->setCenterNav('exam');
            $this->setTitle("测试管理");
        }
        $this->display();
    }


    #答题名单
    public function analysis()
    {
        $exam_id = $_GET[id];
        $exam_model = M('Exam');
        $exam = $exam_model->where(array('uid' => uid(), 'id' => $exam_id))->find();
        if ($exam) {
            $page = D('Center/ExamPaperView')->findMyPageByUid($exam_id);

            //统计已批改的平均分
            $avgScore = D('ExamPaper')->where(array('exam_id' => $exam_id, 'is_corrected' => 1))->avg('exam_score');
            $exam['avg_score'] = $avgScore;
            //统计及格人数
            $passScore = $exam['score'] * 0.6;
            $passCount = D('ExamPaper')->where(
                array('exam_id' => $exam_id, 'exam_score' => array('egt', $passScore), 'is_corrected' => 1)
            )->count();
            $exam['pass_count'] = $passCount;
            //统计已经批改
            $exam['corrected_count'] = D('ExamPaper')->where(
                array('exam_id' => $exam_id, 'is_corrected' => 1)
            )->count();
            //统计优秀人数
            $goodScore = $exam['score'] * 0.8;
            $goodCount = D('ExamPaper')->where(
                array('exam_id' => $exam_id, 'exam_score' => array('egt', $goodScore), 'is_corrected' => 1)
            )->count();
            $exam['good_count'] = $goodCount;
            $this->assign('exam', $exam);

            $subjects = D('ExamSubjectView')->findAllByExam($exam);

            foreach ($subjects as $index => $subject) {
                if ($subject['type_num'] == 'choice') {//如果是多选题

                    //解析显示的正确答案(A、B、C)
                    $right_answerStr = array('A', 'B', 'C', 'D');
                    $show = "";
                    $answer = json_decode($subject['right_answer']);
                    $right_answerS = array();
                    foreach ($answer as $index2 => $value) {
                        if ($value == 1) {
                            array_push($right_answerS, $right_answerStr[$index2]);

                        }
                    }
                    $len = sizeof($right_answerS);
                    foreach ($right_answerS as $index2 => $s) {
                        if ($index2 < $len - 1) {
                            $show = $show . $s . '、';
                        } else {
                            $show = $show . $s;
                        }
                    }
                    $subject['right_answer_str'] = $show;

                    //解析答案内容
                    $subject['answer'] = json_decode($subject['content'], true);
                } elseif ($subject['type_num'] == 'singleChoice') {//如果是单选题
                    //解析显示正确答案(A)
                    $right_answerStr = array('A', 'B', 'C', 'D');
                    $answer = json_decode($subject['right_answer'], true);
                    foreach ($answer as $index2 => $value) {
                        if ($value == 1) {
                            $show = $right_answerStr[$index2];
                        }
                    }
                    $subject['right_answer_str'] = $show;
                    //解析答案内容
                    $subject['answer'] = json_decode($subject['content'], true);
                } elseif ($subject['type_num'] == 'blank') {//如果是填空题
                    //解析html 转义字符
                    $answerCount = substr_count($subject['content'], 'input-blank');
                    $subject['answer_count'] = $answerCount;
                    $subject['content'] = $subject['content'] ? htmlspecialchars_decode($subject['content']) : "";

                    //替换显示
//                $userAnswerS = "";
//                $showContent = $subject['content'];
//                foreach (to_json_obj($subject['right_answer']) as $index2 => $value) {
//                    if(!$value){
//                        $value = "&nbsp;&nbsp;";
//                    }
//                    $showContent = str_replace("value=\"".$value."\"", "value=\"".$value."\" style=\"display:none\"", $showContent);
//                    $userAnswerS = $userAnswerS."<span style='padding: 0 10px;border-bottom: 1px solid black;margin-left: 10px;margin-right: 10px'>".$value."</span>";
//
//                }
                    $subject = $this->_getShoBlank($subject);//['show_content'] = str_replace_once("<input class=", $userAnswerS."<input class=", $showContent);


                } elseif ($subject['type_num'] == 'answer') {//如果是简答题
                    //解析html 转义字符
                    $subject['content'] = $subject['content'] ? htmlspecialchars_decode($subject['content']) : "";

                }
//重新赋值
                $subjects[(int)$index] = $subject;
            }


            $this->assign('subjects', $subjects);

            $this->assign('page', $page);
            $this->setCenterNav('exam');
            $this->setTitle("测试管理");
        }
        $this->display();
    }


    /*****
     * 测试编辑发布页面
     * @param $id
     */
    public function publish($id)
    {
        $exam = D('ExamView')->findById($id);

        $this->_checkExamStatusPage($exam, 'publish');

        if ($exam['ststus'] == 1) {//发布状态下 会将状态改为编辑状态
            $exam['ststus'] = 0;
            D('Exam')->save($exam);
        }

        $this->assign('exam', $exam);
        $subjects = D('ExamSubjectView')->findAllByExam($exam);

        foreach ($subjects as $index => $subject) {
            if ($subject['type_num'] == 'choice') {//如果是多选题

                //解析显示的正确答案(A、B、C)
                $right_answerStr = array('A', 'B', 'C', 'D');
                $show = "";
                $answer = json_decode($subject['right_answer']);
                $right_answerS = array();
                foreach ($answer as $index2 => $value) {
                    if ($value == 1) {
                        array_push($right_answerS, $right_answerStr[$index2]);

                    }
                }
                $len = sizeof($right_answerS);
                foreach ($right_answerS as $index2 => $s) {
                    if ($index2 < $len - 1) {
                        $show = $show . $s . '、';
                    } else {
                        $show = $show . $s;
                    }
                }
                $subject['right_answer_str'] = $show;

                //解析答案内容
                $subject['answer'] = json_decode($subject['content'], true);
            } elseif ($subject['type_num'] == 'singleChoice') {//如果是单选题
                //解析显示正确答案(A)
                $right_answerStr = array('A', 'B', 'C', 'D');
                $answer = json_decode($subject['right_answer'], true);
                foreach ($answer as $index2 => $value) {
                    if ($value == 1) {
                        $show = $right_answerStr[$index2];
                    }
                }
                $subject['right_answer_str'] = $show;
                //解析答案内容
                $subject['answer'] = json_decode($subject['content'], true);
            } elseif ($subject['type_num'] == 'blank') {//如果是填空题
                //解析html 转义字符
                $answerCount = substr_count($subject['content'], 'input-blank');
                $subject['answer_count'] = $answerCount;
                $subject['content'] = $subject['content'] ? htmlspecialchars_decode($subject['content']) : "";

                //替换显示
//                $userAnswerS = "";
//                $showContent = $subject['content'];
//                foreach (to_json_obj($subject['right_answer']) as $index2 => $value) {
//                    if(!$value){
//                        $value = "&nbsp;&nbsp;";
//                    }
//                    $showContent = str_replace("value=\"".$value."\"", "value=\"".$value."\" style=\"display:none\"", $showContent);
//                    $userAnswerS = $userAnswerS."<span style='padding: 0 10px;border-bottom: 1px solid black;margin-left: 10px;margin-right: 10px'>".$value."</span>";
//
//                }
                $subject = $this->_getShoBlank($subject);//['show_content'] = str_replace_once("<input class=", $userAnswerS."<input class=", $showContent);


            } elseif ($subject['type_num'] == 'answer') {//如果是简答题
                //解析html 转义字符
                $subject['content'] = $subject['content'] ? htmlspecialchars_decode($subject['content']) : "";

            }
//重新赋值
            $subjects[(int)$index] = $subject;
        }

        $this->assign('subjects', $subjects);

        $this->display();
    }


    private function _checkExamStatus($exam)
    {
        if (!$exam) {
            $this->ajaxMsg(4, '抱歉，没有找到这份测试');
        } elseif (!check_author($exam['uid'])) {
            $this->ajaxMsg(4, '抱歉，你没有该测试的操作权限');
        } elseif ($exam['status'] < 0) {
            $this->ajaxMsg(2, '抱歉，该测试已经被删除了');
        } elseif ($exam['status'] == 2) {
            $this->ajaxMsg(3, '抱歉，该测试已经被禁用了');
        }
    }

    /**
     * 测试状态页面返回
     * @param $exam
     */
    private function _checkExamStatusPage($exam, $display = '')
    {
        if (!$exam) {
            $this->assign('is_show', false);
            $this->setTitle('测试不存在或已被删除');
            $this->assign('show_title', '测试不存在或已被删除');
            $this->display($display);
            exit();
        } elseif (!check_author($exam['uid'])) {
            $this->error('你没有操作权限', __ROOT__ . '/Exam/index');
        } elseif ((int)$exam['status'] < 0) {
            $this->assign('is_show', false);
            $this->setTitle('测试不存在或已被删除');
            $this->assign('show_title', '测试不存在或已被删除');
            $this->display($display);
            exit();
        } elseif ($exam['status'] == 2) {//不做操作
            $this->setTitle('编辑《' . $exam['title'] . "》");
//            $this->ajaxMsg(3, '抱歉，你的试卷已经被禁用了');
        }
        $this->assign('is_show', true);
    }

    private function _getShoBlank($subject)
    {
        //替换显示
        $userAnswerS = "";
        $showContent = $subject['content'];
        foreach (to_json_obj($subject['right_answer']) as $index2 => $value) {
            if (!$value) {
                $value = "&nbsp;&nbsp;";
            }

            $showContent = str_replace("value=\"" . $value . "\"", "value=\"" . $value . "\" disabled=\"true\"", $showContent);
//            $userAnswerS = $userAnswerS . "<span style='padding: 0 10px;display:inline-block;min-width:170px;padding-bottom:0px;border-bottom: 1px solid black;margin-left: 10px;margin-right: 10px'>" . $value . "</span>";

        }
        $subject['show_content'] = str_replace_once("<input class=", $userAnswerS . "<input class=", $showContent);

        return $subject;
    }
}















