<?php
namespace Admin\Controller;

use Common\Controller\BaseController;
use Common\Util\ImageUploadUtil;
use Think\Controller;
use Weixin\Util\QYConfig;
use Admin\Util\AdminUtil;

/**
 * 党费管理
 * Class SystemController
 * @package Admin\Controller
 */
class PartyMembershipDuesController extends BaseAdminController
{
    function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->set_sidebar_module('PartyMembershipDues');
    }

    public function index()
    {
        $year = I('year');
        $month = I('month');
        if($year && $month){
            $time = $this->time_mouth($year,$month);
        }
        if($year && !$month){
            $time = $this->time_year($year);
        }
        $realname = I('realname');
        $branch_id = I('branch_id');
        $keyword = I('keyword');
        $branch = D('PartyBranch')->field('id,name')->select();//支部列表

        if ($keyword) {  //关键字
            $page = D('PartyMembershipDues')->findPage("name like '%$keyword%'", 15, 'id desc');
            $this->assign('search', array('keyword'=>$keyword));
        }elseif($realname){  //选择成员
            $map['name'] = array('eq', $realname);
            $page = D('PartyMembershipDues')->findPage($map, 15, 'id desc');
        }elseif($branch_id && $year && $month){   //按年月，支部进行筛选
            $map['branch_id'] = array('eq', $branch_id);
            $map['creat_time'] = array('between', array($time['month_start'], $time['month_end']));
            $page = D('PartyMembershipDues')->findPage($map, 15, 'id desc');
        }elseif($branch_id){   //按支部进行筛选
            $map['branch_id'] = array('eq', $branch_id);
            $page = D('PartyMembershipDues')->findPage($map, 15, 'id desc');
        }elseif($year && !$month){  //按年进行筛选
            $map['creat_time'] = array('between', array($time['startTime'], $time['endTime']));
            $page = D('PartyMembershipDues')->findPage($map, 15, 'id desc');
        }elseif($year && $month){     //按年月进行筛选
            $map['creat_time'] = array('between', array($time['month_start'], $time['month_end']));
            $page = D('PartyMembershipDues')->findPage($map, 15, 'id desc');
        }else{
            $page = D('PartyMembershipDues')->findPage('', 15, 'id desc');
        }
        $_SESSION['page'] =$page['list'];//将筛选后的党费缴纳列表放到session 以便PayPartyListToExcel方法   excel下载使用
        $this->assign('page', $page);
        $this->assign('branch', $branch);
        $this->display();
    }


    /*
    *
    * $mouth 月份 数字
    *返回月初时间戳 月末时间戳
    */
    function time_mouth($year,$month)
    {
        $year = (int)$year;
        $month = (int)$month;
        $_POST['yue'] = $year."-".$month;
        $arr=explode('-', $_POST['yue']);
        $begin_time=mktime(0,0,0,$arr['1'],1,$arr['0']);
        $day=date('t',$begin_time);
        $end_time=mktime(23,59,59,$arr['1'],$day,$arr[0]);

        $data['month_start'] = $begin_time;//指定月份月初时间戳  
        $data['month_end'] = $end_time;
        return $data;
    }

    /*
    *
    * $year 年份 数字
    * 返回月年初时间戳 年末时间戳
    */
    function time_year($year)
    {
        $year = (int)$year;
        $smonth = 1;
        $emonth = 12;
        $data['startTime'] = strtotime($year.'-'.$smonth.'-1 00:00:00');
        $em = $year.'-'.$emonth.'-1 23:59:59';
        $data['endTime'] = strtotime(date('Y-m-t H:i:s',strtotime($em)));
        return $data;
    }

    //搜索
    public function ajaxSearch()
    {
        $id = I('id');
        D('PartyMembershipDues')->where(array('id' => $id))->delete();
        ajaxMsg(0, "已删除");
    }


    // 新增 编辑
    public function edit($id = 0)
    {
        $id = I('get.id');
        if ($id > 0) {
            $detail = D('PartyMembershipDues')->where(array('id'=>$id))->find();
            $this->assign('detail', $detail);
        }

        $branchs = D('PartyBranch')->field('id,name')->select();
        $this->assign('branchs', $branchs);
        $this->assign('p', I('get.p', 1));
        $this->display();

    }

    //编辑新增保存
    public function ajaxSave()
    {
        $id = I('id');
        $uid = I('uid');
        $name = I('name');
        $sort = I('sort');
        $money = number_format(I('money'),2);//保留两位小数
        $branch_id = I('branch_id');
        $status = I('status');
        $branch_name = D('PartyBranch')->where(array('id'=>$branch_id))->field('name')->find();
        if(!$sort){
            $sort = 0;
        }
        if (!$uid) {
            ajaxMsg(1, '请先填写姓名');
        }

        if(!$name && $uid){
            $realname = D('User')->where(array('uid'=>$uid))->field('realname')->find();
            $name = $realname['realname'];
        }
        if (!$money) {
            ajaxMsg(1, '请先填写党费金额');
        }
        $year = I('year');
        $month = I('month');
        $array = array(
            'sort'=>$sort,
            'name' => $name,
            'uid' => $uid,
            'money' => $money,
            'branch_id' => $branch_id,
            'branch_name' => $branch_name['name'],
            'status' => $status,
            'year' => $year,
            'month' => $month,
        );
        if ($id) {
            D('PartyMembershipDues')->where(array('id'=>$id))->save($array);
        }else {
            $array1 = array('creat_time'=>time(),'pay_data'=>date('Y-m-d H:i:s',time()));
            $array2 = array_merge($array,$array1);//合并两数组，目的是插入带键值的数组  creat_time (目的是编辑的时候不更新creat_time)
            $result =  D('PartyMembershipDues')->add($array2);
        }
        ajaxMsg(0, '保存成功');
    }

    // 删除
    public function ajaxDec()
    {
        $id = I('id');
        D('PartyMembershipDues')->where(array('id' => $id))->delete();
        ajaxMsg(0, "已删除");
    }

    //获取用户
    public function  ajaxGetUsers()
    {
        $id = I('id', 0);
        $keyword = I('keyword', '');
        if($keyword){
            $user = M('PartyMembershipDues');
            $map['name'] = array('LIKE',"%$keyword%");   //模糊查询包含此文字
            $page = $user->where($map)->select();
            $this->assign('keyword', $keyword);
        }else{
            $page = D('PartyMembershipDues')->select();//select();//limit(0,30)->select();
        }

        foreach ($page as $index => $item) {
            $name = $item['name'];
            $branch_name = $item['branch_name'];
//            if($branch_name){
//                $name = $item['name']."[$branch_name]";
//            }
            $item['html'] = "<a style='color: black;cursor: pointer;'><div class='item canselect'  data-name='$name'>$name</div></a>";

            $page[$index] = $item;
        }

        ajaxMsg(0, 'success', $page);

    }

    /**
     * 导出缴纳党费列表
     * @param  string $fileName 文件名
     * @param  string $strTable 内如
     * @return [type]           [description]
     */
    public function PayPartyListToExcel()
    {
        $fileName = '党费缴纳列表';
        $cellTitle = '党费缴纳';
        $data = $_SESSION['page'];
        $cellName=[
            0=>['id','id',0,12,'left'],
            1=>['name','姓名',0,12,'LEFT'],
            2=>['money','金额',0,12,'left'],
            3=>['branch_name','支部名称',0,12,'left'],
            4=>['branch_id','branch_id',0,12,'LEFT'],
            5=>['year','年份',0,12,'left'],
            6=>['month','月份',0,12,'left'],
            7=>['pay_data','缴费时间',0,25,'LEFT'],
            8=>['status','状态',0,12,'left'],
            9=>['sort','排序',0,12,'left'],
        ];
        $this->exportExcel($fileName, $cellTitle, $cellName, $data);
    }

    /**
     * 加载PHPExcel类
     * @return [type] [description]
     */
    protected function loadPhoExcel5()
    {
        vendor("PHPExcel.PHPExcel");//如果这里提示类不存在，肯定是你文件夹名字不对。
        $this->PHPReader = new \PHPExcel_Reader_Excel5();
    }

    /**
     * execl数据导出
     * @param string $title 文件名的前缀
     * @param string $cellTitle 表头标题
     * @param array $cellName 表头及字段名
     * @param array $data 导出的表数据
     *
     * 特殊处理：合并单元格需要先对数据进行处理
     */
    public function exportExcel($title, $cellTitle, $cellName, $data)
    {
        //引入核心文件
        vendor("PHPExcel.PHPExcel");
        $objPHPExcel = new \PHPExcel();

        //定义配置
        $topNumber = 2;//表头有几行占用
        $xlsTitle = iconv('utf-8', 'gb2312', $title);//文件名称
         $fileName = $title.date('_YmdHis');//文件名称
        $fileName = $xlsTitle.date('_YmdHis');//文件名称
        $cellKey = array(
            'A','B','C','D','E','F','G','H','I','J','K','L','M',
            'N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
            'AA','AB','AC','AD','AE','AF','AG','AH','AI','AJ','AK','AL','AM',
            'AN','AO','AP','AQ','AR','AS','AT','AU','AV','AW','AX','AY','AZ'
        );

        //处理表头标题
        $objPHPExcel->getActiveSheet()->mergeCells('A1:'.$cellKey[count($cellName)-1].'1');//合并单元格（如果要拆分单元格是需要先合并再拆分的，否则程序会报错）
        $objPHPExcel->setActiveSheetIndex(0)->setCellValue('A1', $cellTitle);
        $objPHPExcel->getActiveSheet()->getStyle('A1')->getFont()->setBold(true);
        $objPHPExcel->getActiveSheet()->getStyle('A1')->getFont()->setSize(18);
        $objPHPExcel->getActiveSheet()->getStyle('A1')->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
        $objPHPExcel->getActiveSheet()->getStyle('A1')->getAlignment()->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);

        //处理表头
        foreach ($cellName as $k=>$v)
        {
            $objPHPExcel->setActiveSheetIndex(0)->setCellValue($cellKey[$k].$topNumber, $v[1]);//设置表头数据
            $objPHPExcel->getActiveSheet()->freezePane($cellKey[$k].($topNumber+1));//冻结窗口
            $objPHPExcel->getActiveSheet()->getStyle($cellKey[$k].$topNumber)->getFont()->setBold(true);//设置是否加粗
            $objPHPExcel->getActiveSheet()->getStyle($cellKey[$k].$topNumber)->getAlignment()->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);//垂直居中
            if($v[3] > 0)//大于0表示需要设置宽度
            {
                $objPHPExcel->getActiveSheet()->getColumnDimension($cellKey[$k])->setWidth($v[3]);//设置列宽度
            }
        }

        //处理数据
        foreach ($data as $k=>$v)
        {
            foreach ($cellName as $k1=>$v1)
            {
                $objPHPExcel->getActiveSheet()->setCellValue($cellKey[$k1].($k+1+$topNumber), $v[$v1[0]]);
                if($v['end'] > 0)
                {
                    if($v1[2] == 1)//这里表示合并单元格
                    {
                        $objPHPExcel->getActiveSheet()->mergeCells($cellKey[$k1].$v['start'].':'.$cellKey[$k1].$v['end']);
                        $objPHPExcel->getActiveSheet()->getStyle($cellKey[$k1].$v['start'])->getAlignment()->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);
                    }
                }
                if($v1[4] != "" && in_array($v1[4], array("LEFT","CENTER","RIGHT")))
                {
                    $v1[4] = eval('return PHPExcel_Style_Alignment::HORIZONTAL_'.$v1[4].';');
                    //这里也可以直接传常量定义的值，即left,center,right；小写的strtolower
                    $objPHPExcel->getActiveSheet()->getStyle($cellKey[$k1].($k+1+$topNumber))->getAlignment()->setHorizontal($v1[4]);
                }
            }
        }
        //接下来当然是下载这个表格了，在浏览器输出就好了
        ob_end_clean() ;
        header("Pragma: public");
        header("Expires: 0");
        header("Cache-Control:must-revalidate, post-check=0, pre-check=0");
        header("Content-Type:application/force-download");
        header("Content-Type:application/vnd.ms-execl");
        header("Content-Type:application/octet-stream");
        header("Content-Type:application/download");;
        header('Content-Disposition:attachment;filename='.$fileName.Date('Y-m-d').'.xls');
        header("Content-Transfer-Encoding:binary");
        $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
        $objWriter->save('php://output');
        return ;
        // exit;
    }



    //获取用户
    public function  ajaxGetUsers_member()
    {
        $branch_id = I('branch_id', 0);
        $keyword = I('keyword', '');
        $type = I('type','normal');
        if($keyword){
            $user = M('User');
            $map['realname'] = array('LIKE',"%$keyword%");   //模糊查询包含此文字
            if($branch_id){
                $map['branch_id'] = array('eq',$branch_id);
            }
            $page = $user->where($map)->select();
            $this->assign('keyword', $keyword);
        }elseif($branch_id){
            $page = D('User')->where(array('branch_id'=>$branch_id))->select();//select();//limit(0,30)->select();
        }else{
            ajaxMsg(1, '请先选择支部');
        }

        foreach ($page as $index => $item) {
            $uid = $item["uid"];
            $realname = $item['realname'];
            $branch_name = $item['branch_name'];
            if($branch_name){
                $name = $item['realname'].$item['mobile'] . "[$branch_name]";
            }else{
                $name = $item['realname'].$item['mobile'];
            }
            $item['html'] = "<a style='color: black;cursor: pointer;'><div class='item canselect' data-id='$uid' data-name='$realname'>$name</div></a>";

            $page[$index] = $item;
        }

        ajaxMsg(0, 'success', $page);

    }
}