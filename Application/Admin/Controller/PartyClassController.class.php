<?php
namespace Admin\Controller;

use Admin\Model\AdminAuthRuleViewModel;
use Common\Controller\BaseController;
use Mob\Model\ReviiewViewModel;
use Think\Controller;
use Admin\Util\AdminUtil;

/**
 * 文章管理
 * Class ContentController
 * @package Home\Controller
 */
class PartyClassController extends BaseAdminController
{

    function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->set_sidebar_module('App');
        $this->set_sidebar_sub('PartyClass');
    }

    public function index()
    {
        $keyword = I('keyword');
        $start_date = I('get.start_date');
        $end_date = I('get.end_date');

        $search['start_date'] = $start_date;
        $search['end_date'] = $end_date;
        $search['keyword'] = $keyword;
        $this->assign('search', $search);

        $startDate = $start_date == "" ? 0 : strtotime($start_date);
        $endDate = $end_date == "" ? time() : strtotime($end_date) + (24 * 60 * 60);

        $classCount = D('PartyClass')->where("create_time > $startDate and create_time < $endDate and status > -1")->count();
        $this->assign('count', $classCount);

//        $map = array();
//        if ($keyword) {
//            $map['PartyBranch.name'] = array('like', '%' . $keyword . '%');
//        }
//
//        $page = D('PartyBranchView')->find_page($map, "", "PartyBranch.id", "PartyBranch.id asc", 15);
        $map = array();
        if ($keyword) {
            $map['PartyBranch.name'] = array('like', "%$keyword%");
        }

        $page = D('PartyBranchView')->find_page($map, "", "PartyBranch.id", "PartyBranch.id asc", 15);
//        exit('branch = '.to_json_string($page));

        // 遍历筛选出来的支部，统计各支部的成员数量
        foreach ($page['list'] as $index => $item) {
            $itemid = $item['id'];  // 支部id
            // 统计支部成员数量
            $item['member_count'] = D('User')->where("branch_id=$itemid and status=1")->count();
            // 统计支部微党课数量
            $item['class_count'] = D('PartyClass')->where(array('create_time'=>array(array('gt',$startDate), array('lt',$endDate)), 'branch_id' => $itemid, 'status' => array('gt', -1)))->count();
            $page['list'][$index] = $item;
        }

        $this->assign('page', $page);

        $this->display();
    }

    public function branchClass()
    {
        $keyword = I('keyword');
        $start_date = I('get.start_date');
        $end_date = I('get.end_date');

        $search['start_date'] = $start_date;
        $search['end_date'] = $end_date;
        $search['keyword'] = $keyword;

        $startDate = $start_date == "" ? 0 : strtotime($start_date);
        $endDate = $end_date == "" ? time():strtotime($end_date)+(24*60*60);

        $auth = AdminUtil::auth();

        $map = array();
        $map['PartyClass.status'] = array('gt', -1);
        $map['PartyClass.create_time'] = array( array('gt', $startDate), array('lt', $endDate));

        if ($auth == 3) {
            $branch = AdminUtil::auth_branch();
            $branchId = $branch['id'];
            $map['PartyClass.branch_id'] = $branch['id'];
        }else{
            $branchId = I('branch_id');
            $branch = D('PartyBranch')->find($branchId);
            $this->assign('branch', $branch);
            $map['PartyClass.branch_id'] = $branchId;
            $search['branch_id'] = $branchId;
        }
        $this->assign('search', $search);

        $keyword = I('keyword');
        if ($keyword) {
            $map['PartyClass.speaker'] = array('like', '%' . $keyword . '%');
        }

//        $classCount = D('PartyClass')->where("branch_id=$branchId and create_time > $startDate and create_time < $endDate and status > -1")->count();
//        $this->assign('count', $classCount);

        $this->assign('page', D('PartyClassView')->findPage($map, 15, 'id desc'));
        $this->display();
    }

    public function ajaxDecClass()
    {
        $auth = AdminUtil::auth();
        if ($auth > 0) {
            $id = I('post.id');
            if ($id > 0 && !empty($id)) {
                $old = D('PartyClass')->where(array('id' => $id))->find();
                $old['status'] = -1;
                D('PartyClass')->where(array('id' => $id))->save($old);
                ajaxMsg(0, '保存成功');
            }
            ajaxMsg(1, '不存在');
        } else {
            ajaxMsg(1, '权限不足');
        }
    }

    public function branchSituation()
    {
        $admin = admin();
        $auth = session_auth();
        if ($auth == 1) {//总支
            $partyClassId = I('partyClassId');
            $this->assign('partyClassId', $partyClassId);
            $keyword = I('keyword');
            $map = array();
            if ($keyword) {
                $map['PartyBranch.name'] = array('like', "%" . $keyword . "%");
                $this->assign('search', array('keyword' => $keyword));
            }

            $page = D('PartyBranchView')->find_page($map, "", "PartyBranch.id", "PartyBranch.id asc", 15);

            // 遍历筛选出来的支部，统计各支部的党员数量和委员组成
//            $partybranchId = C('ROLE_PARTY_ID');
            foreach ($page['list'] as $index => $item) {
                // 统计各支部党员数量
                $itemid = $item['id'];

                $count = D('User')->where("branch_id=$itemid and status=1")->count();
                $finishCount = D('PartyClassPlayLogView')->where("PartyClassPlayLog.party_class_id=$partyClassId and User.branch_id=$itemid")->count();
                $item['member_count'] = $count;
                $item['finish_count'] = $finishCount;
                $item['unfinish_count'] = $count - $finishCount;
                $page['list'][$index] = $item;
            }

            $this->assign('page', $page);
        }

        $this->display();
    }

    public function finishDetail()
    {
        $admin = admin();
        $auth = session_auth();
        if ($auth == 1) {//总支
            $branchId = I('branchId');
            $this->assign('branchId', $branchId);
            $partyClassId = I('partyClassId');
            $this->assign('partyClassId', $partyClassId);
            $this->assign('branchId', $branchId);
            $keyword = I('keyword');
            $map = array();
            $map['branch_id'] = $branchId;
            if ($keyword) {
                $map['realname'] = array('like', "%" . $keyword . "%");
                $this->assign('search', array('keyword' => $keyword));
            }
            $userList = D('User')->where($map)->select();
//            exit("aaa = ".to_json_string($userList));
            foreach ($userList as $index => $item) {
                $itemid = $item['uid'];
                $playLog = D('PartyClassPlayLog')->where(array("party_class_id" => $partyClassId, 'uid' => $itemid))->find();
                if ($playLog) {
                    $item['finish_time'] = $playLog['create_time'];
                } else {
                    $item['finish_time'] = 0;
                }
                $userList[$index] = $item;
            }

            $this->assign('userList', $userList);
        }

        $this->display();
    }

}