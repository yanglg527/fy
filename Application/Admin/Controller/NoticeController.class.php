<?php
namespace Admin\Controller;

use Common\Controller\BaseController;
use Think\Controller;

/**
 * 支部管理
 * Class SystemController
 * @package Admin\Controller
 */
class NoticeController extends BaseAdminController
{

    function _initialize()
	{
		parent::_initialize(); // TODO: Change the autogenerated stub
		$this->set_sidebar_module('Notice');
		$this->set_sidebar_sub('index');
	}

    public function index(){
    	
        $map['status'] = array('neq',-1);
        $missions=D('MissionView')->findPage($map,15,'id desc');

       //  $map['uid']=10098;
       //  $time_now=time();
       //  $map['MU.status'] = 0;
       //  $map['MS.status'] = 1;
       //  $map['s_time'] = array('lt',$time_now);
       //  $map['e_time'] = array('gt',$time_now);

       // $notices = M('mission_user')->alias('MU')->field('MU.id,MU.uid,MU.admin_uid,MU.s_time,MU.e_time,MU.mission_id,MS.title,MS.content,MS.assist_unit_id,MS.mission_score,MS.push_person,MS.person_adm_id,MS.standard_id')->join('mission as MS on MS.id=MU.mission_id')->where($map)->order('add_time asc')->select();
       //  // echo M('mission_user')->getLastSql();
       //  var_dump($notices);

        $this->assign("missions",$missions);
    	$this->display();
    }

    //二维数组过滤相同项
    public function array_unique_fb($array2D){ 

        foreach ($array2D as $v){

            $v=join(',',$v);//降维,也可以用implode,将一维数组转换为用逗号连接的字符串

            $temp[]=$v;
        }

        $temp=array_unique($temp);//去掉重复的字符串,也就是重复的一维数组

        foreach ($temp as $k => $v){

            $temp[$k]=explode(',',$v);//再将拆开的数组重新组装

        }

        return $temp;
    }

    public function add(){
        //任务类型
        $type_id = I('type_id');
        $this->assign('type_id',$type_id);

        //协助落实单位
        $assist_list = D('AssistUnit')->select();      
        $this->assign('assist_list',$assist_list);

        //推送的行政标签
        $adms = D('AdmPost')->where(array('pid'=>array('gt',0)))->select();
        $this->assign('adms',$adms);

        //规范一级目录
        $frist_standard = D('t_partybldregtype')->where(array('parent_id'=>1))->order('sort asc')->select();
        $this->assign('frist_standard',$frist_standard);

        //负责人
        $person_adm = D('PersonAdmin')->select();
        $this->assign('person_adm',$person_adm);
        
        $this->assign('p', I('get.p',1));
    	$this->display();
    }

    //ajax获取规范二级目录
    public function ajaxSecendStandard(){
        $frist_standard_id = I('frist_standard_id'); 

        //规范二级目录
        $secend_standard = D('t_partybldregtype')->where(array('parent_id'=>$frist_standard_id))->order('sort asc')->select();

        echo json_encode($secend_standard);
    }

    //ajax获取规范三级目录
    public function ajaxThirdList(){
        $secend_standard_id = I('secend_standard_id');

        //规范三级目录
        $third_standard = D('t_partybldregtype')->where(array('parent_id'=>$secend_standard_id))->order('sort asc')->select();

        echo json_encode($third_standard);
    }

    //添加待办任务
    public function ajaxAdd(){
        if(!(I('person_adm_id'))){
            $person_adm_id ="";
        }else{
            $person_adm_id = serialize(I('person_adm_id'));
        }
        $data['person_adm_id'] = $person_adm_id;
        $data['mission_type']=I('mission_type');
        $data['title']=trim(I('title'));
        $data['assist_unit_id']=serialize(I('assist_unit_id'));
        $data['content']=I('content');
        $data['mission_score']=I('mission_score');
        $data['push_person']=serialize(I('push_person'));
        $data['standard_id']=serialize(I('standard_id'));
        $data['create_time']=time();

        //频率
        if($data['mission_type'] == '2'){
            $data['pinlv_type'] = I('pinlv_type');
            $data['frequency_type'] = I('frequency_type');
        }
        //指定时间
        if($data['mission_type'] == '3'){
            $data['start_time'] = strtotime(I('start_time'));
            $data['end_time'] = strtotime(I('end_time'))+86399;
        }

        if (!$data['title']) {
            ajaxMsg(1, '请填写责任事项');
        }
        if (!$data['content']) {
            ajaxMsg(1, '请填写见证资料');
        }
        if (!$data['mission_score']) {
            ajaxMsg(1, '请填写任务分值');
        }
        if (!$data['push_person']) {
            ajaxMsg(1, '请选择推送对象');
        }
        if (!$data['standard_id']) {
            ajaxMsg(1, '请填写任务规范1.0章节');
        }

        //规定任务所需录入的台帐类型
        $data['taizhang_type'] = 3; //领导台帐

        $mission_list = D('Mission')->add($data);

        // $notice_id=D('Notice')->add($data);
        // $this->addUserNoticeStatus($notice_id,$data['type_id']);
        ajaxMsg(0, '1');
    }


    //添加时间页面
    public function add_time(){
        $mission_id = I('id');

        $mission_info = D('Mission')->where(array('id'=>$mission_id))->find();  //任务详情

        $this->assign('mission_info',$mission_info);
        $this->assign('mission_id',$mission_id);
        $this->display();
    }

    //ajax添加开始时间、结束时间
    public function ajaxAddTime(){
        $mission_id = I('mission_id');
        $data['start_time'] = strtotime(I('start_time'));
        $data['end_time'] = strtotime(I('end_time'))+86399; 

        $mission_info = D('Mission')->where(array('id'=>$mission_id))->find();  //任务详情
        //判断当前任务是否在启动状态
        if($mission_info['status'] == '1'){
            ajaxMsg(1, '任务已启动，无法修改，请取消任务再试');
            exit();
        }

        $map['id'] = $mission_id;
        D('Mission')->where($map)->save($data);
        ajaxMsg(0, '1');
    }

    //查看任务详情
    public function detail(){
        $id = I('id');

        //负责人
        $person_adm = D('PersonAdmin')->select();
        $this->assign('person_adm',$person_adm);

        //协助落实单位
        $assist_list = D('AssistUnit')->select();      
        $this->assign('assist_list',$assist_list);

        //推送的行政标签
        $adms = D('AdmPost')->where(array('pid'=>array('gt',0)))->select();
        $this->assign('adms',$adms);

        $mission_info = D('mission')->where(array('id'=>$id))->find();

        $mission_info['push_person'] = unserialize($mission_info['push_person']);

        $mission_info['standard_id'] = unserialize($mission_info['standard_id']);

        $mission_info['assist_unit_id'] = unserialize($mission_info['assist_unit_id']);

        $mission_info['person_adm_id'] = unserialize($mission_info['person_adm_id']);


        $mission_info['standard_str'] = '';
        foreach($mission_info['standard_id'] as $k=>$v){
            $frist_standard[$k] = D('t_partybldreg')->where(array('id'=>$v))->find();
            if($k==0){
                $str = '';
            }else{
                $str = '、';
            }
            $mission_info['standard_str'] =$mission_info['standard_str'].$str.$frist_standard[$k]['value'].$frist_standard[$k]['label'];          
        }

        $this->assign('mission_info',$mission_info);
        $this->display();
    }

    //编辑任务
    public function edit(){
        $id = trim(I('id'));

        $mission_info['id'] = $id;
        //负责人
        $person_adm = D('PersonAdmin')->select();
        $this->assign('person_adm',$person_adm);

        //协助落实单位
        $assist_list = D('AssistUnit')->select();      
        $this->assign('assist_list',$assist_list);

        //推送的行政标签
        $adms = D('AdmPost')->where(array('pid'=>array('gt',0)))->select();
        $this->assign('adms',$adms);

        //规范一级目录
        $frist_standard = D('t_partybldregtype')->where(array('parent_id'=>1))->order('sort asc')->select();
        $this->assign('frist_standard',$frist_standard);

        $mission_info = D('mission')->where(array('id'=>$id))->find();

        $mission_info['push_person'] = unserialize($mission_info['push_person']);

        $mission_info['standard_id'] = unserialize($mission_info['standard_id']);

        $mission_info['assist_unit_id'] = unserialize($mission_info['assist_unit_id']);

        $mission_info['person_adm_id'] = unserialize($mission_info['person_adm_id']);

        foreach($mission_info['standard_id'] as $k=>$v){
            $mission_info['standard_id'][$k] = D('t_partybldreg')->where(array('id'=>$v))->find();
        }

        $this->assign('mission_info',$mission_info);
        $this->display();
    }

    //添加待办任务
    public function ajaxEdit(){
        $mission_id = trim(I('mission_id'));
        $mission_type=trim(I('mission_type'));

        if(!(I('person_adm_id'))){
            $person_adm_id ="";
        }else{
            $person_adm_id = serialize(I('person_adm_id'));
        }
        $data['person_adm_id'] = $person_adm_id;
        $data['title']=trim(I('title'));
        $data['assist_unit_id']=serialize(I('assist_unit_id'));
        $data['content']=I('content');
        $data['mission_score']=I('mission_score');
        $data['push_person']=serialize(I('push_person'));
        $data['standard_id']=serialize(I('standard_id'));
        $data['create_time']=time();

        //频率
        if($mission_type == '2'){
            $data['pinlv_type'] = I('pinlv_type');
            $data['frequency_type'] = I('frequency_type');
        }
        //指定时间
        if($mission_type == '3'){
            $data['start_time'] = strtotime(I('start_time'));
            $data['end_time'] = strtotime(I('end_time'))+86399;
        }

        if (!$data['title']) {
            ajaxMsg(1, '请填写责任事项');
        }
        if (!$data['content']) {
            ajaxMsg(1, '请填写见证资料');
        }
        if (!$data['mission_score']) {
            ajaxMsg(1, '请填写任务分值');
        }
        if (!$data['push_person']) {
            ajaxMsg(1, '请选择推送对象');
        }
        if (!$data['standard_id']) {
            ajaxMsg(1, '请填写任务规范1.0章节');
        }

        //规定任务所需录入的台帐类型
        $data['taizhang_type'] = 3; //领导台帐

        $mission_list = D('Mission')->where(array('id'=>$mission_id))->save($data);

        // $notice_id=D('Notice')->add($data);
        // $this->addUserNoticeStatus($notice_id,$data['type_id']);
        ajaxMsg(0, '1');
    }

    //启动任务
    public function start_mission(){
        $mission_id = I('mission_id');
        $mission_info = D('Mission')->find($id);

        //自动生成此任务本年度的待办子任务
        $this->autoAddMission($mission_id);

        if($mission_info){
            $data['status'] = 1;  //启动任务
            $data['on_time'] = time();
            D('Mission')->where(array('id'=>$mission_id))->save($data);
            ajaxMsg(0,'待办任务已启动');
        }else{
            ajaxMsg(1,'该待办任务不存在或稍后重试');
        }

    }

    //取消任务
    public function cancelMission(){
        $mission_id = I('mission_id');
        $mission_info = D('Mission')->find($id);

        if($mission_info){
            $data['status'] = 0;  //取消任务
            D('Mission')->where(array('id'=>$mission_id))->save($data);
            ajaxMsg(0,'待办任务已经取消');
        }else{
            ajaxMsg(1,'该待办任务不存在或稍后重试');
        }

    }

    //删除待办任务
    public function ajaxDec(){
        set_time_limit(0);
        $id = I('post.id');
        $notice = D('Mission')->find($id);
        if($notice){
            $notice["status"]=-1;
            D('Mission')->save($notice);
            // D('NoticeUserStatus')->where(array('notice_id'=>$notice['id'],'status'=>1))->save(array('status'=>-1));

            //查找所有的子任务
            $z_mission = M('mission_user')->where(array('mission_id'=>$notice['id'],'status'=>0))->select();
            foreach($z_mission as $k=>$v){
                $save['status'] = -1;
                M('mission_user')->where(array('id'=>$v['id']))->save($save);
            }
            ajaxMsg(0, "已删除");
        }else{
            ajaxMsg(1,'待办事项不存在');
        }
    }

    public function user(){
    	$notice_id=I('get.id');
    	$map['notice_id']=$notice_id;
    	$map['status']=1;
    	$notice_user=D('NoticeUserStatusView')->findPage($map,15,'id desc');
        $this->assign("notice_user",$notice_user);
    	$this->display();
    }

    public function test(){
        // $user=D('PartyBranch')->relation(true)->select();
       $where='';
            $where['status']=1;
            $where['organization_id']=array(array('gt',0));
            // $where['sj_uid']=null;
            $dz_adm=D('UserOrganizationAdmView')->where($where)->select();
            $party=D('User')->where(array('post_id'=>1,'status'=>1,'branch_id'=>array('gt',0)))->select();
            // D('user')->where(array('organization_id'=>15))->save(array('organization_id'=>null));
        echo to_json_string($party); 
    }

    //待办任务自动生成 
    private function autoAddMission($mission_id){
        set_time_limit(0);
        //主待办任务的信息
        $mission_info = D('Mission')->where(array('id'=>$mission_id))->find();

        //推送对象(行政标签)
        $push_person = unserialize($mission_info['push_person']);

        //协助负责人
        if($mission_info['person_adm_id']){
            $person_adm_id = unserialize($mission_info['person_adm_id']);

            $map1['person_adm_id'] = array('neq','');
            $info = D('UserOrganizationAdmView')->where($map1)->field('uid,admin_uid,person_adm_id')->select();  

            foreach($person_adm_id as $k=>$v){
                foreach($info as $k1=>$v1){
                    if(in_array($v,unserialize($v1['person_adm_id']))){
                        $arr[] =  array(
                               $v1['uid'],
                                $v1['admin_uid']
                            );   
                    }
                }
            }

            //过滤相同的user
            if($arr){
              $a1 = $this->array_unique_fb($arr);  
            }else{
                $a1 = array();
            }
            
        }

        //推送对象info
        $map['adm_id'] = array('in',$push_person);

        $user_info = D('UserOrganizationAdmView')->where($map)->field('uid,admin_uid')->select(); 

        //判断user_info为空的时候,要定义a2为空数组
        if($user_info){
            $a2 = $this->array_unique_fb($user_info);
        }else{
            $a2 = array();
        } 

        //经过过滤的最终推送用户
        $user_info = $this->array_unique_fb(array_merge($a1,$a2));


        //1: 根据工作安排生成  3: 指定时间生成
        if($mission_info['mission_type'] == '1'||$mission_info['mission_type'] == '3'){
            foreach ($user_info as $k => $v) {
                $save['uid'] = $v['0']; 
                $save['admin_uid'] = $v['1'];
                $save['mission_id'] = $mission_info['id'];
                $save['s_time'] = $mission_info['start_time'];
                $save['e_time'] = $mission_info['end_time'];
                $save['add_time'] = time();
                $save['status'] = 0;

                //把2017年上半年之前任务自动转到完成
                if(date('Y',time()) == '2017'){
                    if($mission_info['end_time'] < time()){
                        $save['status'] = 1;
                    }
                }

                D('MissionUser')->add($save);
            }
        }

        //2:按频率生成
        if($mission_info['mission_type'] == '2'){
            if($mission_info['frequency_type'] == '1'){ //按周   
                $week_list = get_week(date('Y',time()));
                foreach ($user_info as $k => $v) {
                        foreach($week_list as $k1=>$v1){
                            $save['uid'] = $v['0']; 
                            $save['admin_uid'] = $v['1'];
                            $save['mission_id'] = $mission_info['id'];
                            $save['s_time'] = strtotime($v1['0']);
                            $save['e_time'] = strtotime($v1['1']);
                            $save['add_time'] = time();
                            $save['status'] = 0;

                            //频率生成方式为1，从1月1日开始生成
                            if($mission_info['pinlv_type']==1){
                                //把2017年上半年之前任务自动转到完成
                                if(date('Y',time()) == '2017'){
                                    if($save['e_time'] < time()){
                                        $save['status'] = 1;
                                    }
                                }
                                D('MissionUser')->add($save);
                            }else if($mission_info['pinlv_type']==2&&$save['e_time']>time()){
                                D('MissionUser')->add($save);
                            }
                        }
                }
            }else if($mission_info['frequency_type'] == '2'){   //按月
                foreach ($user_info as $k => $v) {
                    for($i=1;$i<=12;$i++){
                        $save['uid'] = $v['0']; 
                        $save['admin_uid'] = $v['1'];
                        $save['mission_id'] = $mission_info['id'];
                        $save['s_time'] = strtotime(date('Y',time()).'-'.$i.'-1');
                        if($i=='12'){
                            $save['e_time'] = strtotime((date('Y',time())+1).'-1-1')-1; //当年的最后一天
                        }else{
                            $save['e_time'] = strtotime(date('Y',time()).'-'.($i+1).'-1')-1;
                        } 
                        $save['add_time'] = time();
                        $save['status'] = 0;

                        //频率生成方式为1，从1月1日开始生成
                        if($mission_info['pinlv_type']==1){
                            //把2017年上半年之前任务自动转到完成
                            if(date('Y',time()) == '2017'){
                                if($save['e_time'] < time()){
                                    $save['status'] = 1;
                                }
                            }
                            D('MissionUser')->add($save);
                        }else if($mission_info['pinlv_type']==2&&$save['e_time']>time()){
                            D('MissionUser')->add($save);
                        }
                    }
                }

            }else if($mission_info['frequency_type'] == '3'){   //按季度
                foreach ($user_info as $k => $v) {
                    for($i=0;$i<=3;$i++){
                        $save['uid'] = $v['0']; 
                        $save['admin_uid'] = $v['1'];
                        $save['mission_id'] = $mission_info['id'];

                        //每年开始时间
                        $save['s_time'] = strtotime(date('Y',time()).'-'.($i*3+1).'-1');
                        
                        //每年的结束时间
                        if($i=='3'){
                            $save['e_time'] = strtotime((date('Y',time())+1).'-1-1')-1;
                        }else{
                            $save['e_time'] = strtotime(date('Y',time()).'-'.(1+($i+1)*3).'-1')-1;
                        } 
                        $save['add_time'] = time();
                        $save['status'] = 0;

                        //频率生成方式为1，从1月1日开始生成
                        if($mission_info['pinlv_type']==1){
                            //把2017年上半年之前任务自动转到完成
                            if(date('Y',time()) == '2017'){
                                if($save['e_time'] < time()){
                                    $save['status'] = 1;
                                }
                            }
                            D('MissionUser')->add($save);
                        }else if($mission_info['pinlv_type']==2&&$save['e_time']>time()){
                            D('MissionUser')->add($save);
                        }
                    }
                }

            }else if($mission_info['frequency_type'] == '4'){   //按半年
                foreach ($user_info as $k => $v) {
                    for($i=0;$i<=1;$i++){
                        $save['uid'] = $v['0']; 
                        $save['admin_uid'] = $v['1'];
                        $save['mission_id'] = $mission_info['id'];

                        //每年开始时间
                        $save['s_time'] = strtotime(date('Y',time()).'-'.($i*6+1).'-1');
                        
                        //每年的结束时间
                        if($i=='1'){
                            $save['e_time'] = strtotime((date('Y',time())+1).'-1-1')-1;
                        }else{
                            $save['e_time'] = strtotime(date('Y',time()).'-7-1')-1;
                        } 
                        $save['add_time'] = time();
                        $save['status'] = 0;

                        //频率生成方式为1，从1月1日开始生成
                        if($mission_info['pinlv_type']==1){
                            //把2017年上半年之前任务自动转到完成
                            if(date('Y',time()) == '2017'){
                                if($save['e_time'] < time()){
                                    $save['status'] = 1;
                                }
                            }
                            D('MissionUser')->add($save);
                        }else if($mission_info['pinlv_type']==2&&$save['e_time']>time()){
                            D('MissionUser')->add($save);
                        }
                    }
                }

            }else if($mission_info['frequency_type'] == '5'){   //按年
                foreach ($user_info as $k => $v) {
                    $save['uid'] = $v['0']; 
                    $save['admin_uid'] = $v['1'];
                    $save['mission_id'] = $mission_info['id'];

                    //年开始时间
                    $save['s_time'] = strtotime(date('Y',time()).'-1-1');
                    //年结束时间
                    $save['e_time'] = strtotime((date('Y',time())+1).'-1-1')-1;

                    $save['add_time'] = time();
                    $save['status'] = 0;

                    D('MissionUser')->add($save);
            }
            }
        }


        //指定时间
    }

    private function addUserNoticeStatus($notice_id,$type_id){
    	if ($type_id == 1) {
    		$dangzu=D('PartyOrganizationMsView')->select();
    		
    		foreach($dangzu as $vo){
                if ($vo['ms_uid']) {
                    D('NoticeUserStatus')->add(array("uid"=>$vo['ms_uid'],"notice_id"=>$notice_id,"add_taizhang_uid"=>$vo['ms_uid'],"create_time"=>time(),"organization_id"=>$vo['id']));
                }
    			$users=D('User')->where(array("organization_id"=>$vo['id'],"status"=>1))->select();
    			foreach($users as $user){
    				D('NoticeUserStatus')->add(array("uid"=>$user['uid'],"notice_id"=>$notice_id,"add_taizhang_uid"=>$vo['ms_uid'],"is_main"=>1,"create_time"=>time(),"organization_id"=>$vo['id']));
    			}
    		}
    	}elseif ($type_id == 2) {
            $dangzu=D('PartyOrganizationMsSjView')->select();
            
            foreach($dangzu as $vo){
                if ($vo['ms_uid']) {
                    D('NoticeUserStatus')->add(array("uid"=>$vo['ms_uid'],"notice_id"=>$notice_id,"add_taizhang_uid"=>$vo['ms_uid'],"create_time"=>time(),"organization_id"=>$vo['id']));
                }
                if ($vo['sj_uid']) {
                    D('NoticeUserStatus')->add(array("uid"=>$vo['sj_uid'],"notice_id"=>$notice_id,"add_taizhang_uid"=>$vo['ms_uid'],"is_main"=>1,"create_time"=>time(),"organization_id"=>$vo['id']));
                }
                
                
            }
        }elseif ($type_id == 3) {
            $where='';
            $where['status']=1;
            $where['organization_id']=array(array('gt',0));
            // $where['sj_uid']=null;
            $dz_adm=D('UserOrganizationAdmView')->where($where)->select();

            foreach($dz_adm as $vo){
                $add_taizhang_uid = $vo['uid'];
                if ($vo['sj_uid'] == null || $vo['sj_uid']=='') {
                    if ($vo['admin_uid']) {
                        $add_taizhang_uid = $add_taizhang_uid . ',' . $vo['admin_uid'];
                        D('NoticeUserStatus')->add(array("uid"=>$vo['admin_uid'],"notice_id"=>$notice_id,"add_taizhang_uid"=>$add_taizhang_uid,"create_time"=>time(),"organization_id"=>$vo['id']));
                    }
                    if ($vo['uid']) {
                        D('NoticeUserStatus')->add(array("uid"=>$vo['uid'],"notice_id"=>$notice_id,"add_taizhang_uid"=>$add_taizhang_uid,"is_main"=>1,"create_time"=>time(),"organization_id"=>$vo['id']));
                    }
                    
                }
                
                
                
                
            }
        }elseif ($type_id == 4) {
            $user=D('User')->where(array('branch_id'=>56,"status"=>1))->select();
            $adminUser=D('PartyBranchAdm')->where(array('branch_id'=>56))->select();
            $add_taizhang_uid = '';
            foreach($adminUser as $i=>$vo){
                if ($i == 0) {
                    $add_taizhang_uid=$vo['uid'];
                }else{
                    $add_taizhang_uid=$add_taizhang_uid . ',' . $vo['uid'];
                }
                  
            }
            foreach($user as $vo){
                    D('NoticeUserStatus')->add(array("uid"=>$vo['uid'],"notice_id"=>$notice_id,"add_taizhang_uid"=>$add_taizhang_uid,"is_main"=>1,"create_time"=>time(),'branch_id'=>56));
            }
        }elseif ($type_id == 5) {
            $user=D('User')->where(array('branch_id'=>51,"status"=>1))->select();
            $adminUser=D('PartyBranchAdm')->where(array('branch_id'=>51))->select();
            $add_taizhang_uid = '';
            foreach($adminUser as $i=>$vo){
                if ($i == 0) {
                    $add_taizhang_uid=$vo['uid'];
                }else{
                    $add_taizhang_uid=$add_taizhang_uid .','.$vo['uid'];
                }
                  
            }
            foreach($user as $vo){
                    D('NoticeUserStatus')->add(array("uid"=>$vo['uid'],"notice_id"=>$notice_id,"add_taizhang_uid"=>$add_taizhang_uid,"is_main"=>1,"create_time"=>time(),'branch_id'=>51));
            }
        }elseif ($type_id == 6) {
            $branchs=D('PartyBranch')->relation(true)->select();
            foreach ($branchs as $index => $vo) {
                $add_taizhang_uid='';
                foreach( $vo['admins'] as $i=>$admin){
                  if ($i == 0) {
                      $add_taizhang_uid=$admin['uid'];
                  }else{
                      $add_taizhang_uid=$add_taizhang_uid . ',' . $admin['uid'];
                  }
                }

                foreach( $vo['users'] as $i=>$user){
                   D('NoticeUserStatus')->add(array("uid"=>$user['uid'],"notice_id"=>$notice_id,"add_taizhang_uid"=>$add_taizhang_uid,"is_main"=>1,"create_time"=>time(),'branch_id'=>$vo['id']));
                }
            }
        }elseif ($type_id == 7) {
            $party_hq=D('PartyBranchHq')->select();
            foreach ($party_hq as $key => $vo) {
                if($vo['sj_uid']){
                    $add_taizhang_uid=$vo['sj_uid'];
                    if($vo['adm_uid']){
                        $add_taizhang_uid=$add_taizhang_uid.','.$vo['adm_uid'];
                        D('NoticeUserStatus')->add(array("uid"=>$vo['adm_uid'],"notice_id"=>$notice_id,"add_taizhang_uid"=>$add_taizhang_uid,"create_time"=>time(),'branch_hq_id'=>$vo['id']));
                    }
                    D('NoticeUserStatus')->add(array("uid"=>$vo['sj_uid'],"notice_id"=>$notice_id,"add_taizhang_uid"=>$add_taizhang_uid,"is_main"=>1,"create_time"=>time(),'branch_hq_id'=>$vo['id']));
                }
            }
            $party=D('User')->where(array('post_id'=>1,'status'=>1,'branch_id'=>array('gt',0)))->select();
            foreach ($party as $key => $vo) {
                $adm=D('PartyBranchAdm')->where(array('branch_id'=>$vo['branch_id']))->select();
                $add_taizhang_uid=$vo['uid'];
                foreach($adm as $i=>$admin){
                  // if ($i == 0) {
                  //     $add_taizhang_uid=$add_taizhang_uid.$admin['uid'];
                  // }else{
                      $add_taizhang_uid=$add_taizhang_uid . ',' . $admin['uid'];
                  // }
                }
                foreach($adm as $i=>$admin){
                    D('NoticeUserStatus')->add(array("uid"=>$admin['uid'],"notice_id"=>$notice_id,"add_taizhang_uid"=>$add_taizhang_uid,"create_time"=>time(),'branch_id'=>$vo['branch_id']));
                }
                D('NoticeUserStatus')->add(array("uid"=>$vo['uid'],"notice_id"=>$notice_id,"add_taizhang_uid"=>$add_taizhang_uid,"is_main"=>1,"create_time"=>time(),'branch_id'=>$vo['branch_id']));
            }

        }

    }


}