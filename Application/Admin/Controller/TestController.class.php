<?php
namespace Admin\Controller;

use Common\Controller\BaseAuthController;
use Common\Controller\BaseController;
use Think\Controller;
use Admin\Util\AdminUtil;

/**
 * 网页版登录
 * Class IndexController
 * @package Admin\Controller
 */
class TestController extends BaseAdminController
{

    function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->set_sidebar_module('App');
        $this->set_sidebar_sub('Test');
    }

    public function test2()
    {
        //         define("WWWROOT",str_ireplace(str_replace("/","\\",$_SERVER['PHP_SELF']),'',__FILE__)."\\");
        // var_dump( $_SERVER) ;
        echo $_SERVER['DOCUMENT_ROOT'] . "/1.doc";
    }
    public function test()
    {
        $word = new \COM("word.application") or die("Can’t start Word!");
        echo "Loading Word, v. {$word->Version}";
        $word->Visible = 0;
        $word->Documents->open($_SERVER['DOCUMENT_ROOT'] . "/1.doc");
        $test = $word->ActiveDocument->content->Text;
        echo $test;
    }
    public function  ajaxChangeTextStatus()
    {
        $id = I('id');
        $item = D('Exam')->find($id);
        if ($item) {
            $status = $item['status'];
            if ($status == -1) {
                ajaxMsg(1, '该测试已经删除了');
            }
            if ($status == 1) {
                $save['status'] = 0;
            } else {
                $save['status'] = 1;
            }
            D('Exam')->where(array('id' => $id))->save($save);
            ajaxMsg(0, '保存成功');
        } else {
            ajaxMsg(1, '该测试已经删除了');
        }
    }

    public function testEdit()
    {
        $id = I('id');
        if ($id) {
            $detail = D('ExamView')->where("Exam.id=$id and Exam.status>-1")->find();
            $roles = D('ExamRole')->where(array('exam_id' => $id))->select();
            $detail['role_limit'] = $roles;
            $this->assign('detail', $detail);
        }


        $roles = D('Role')->select();
        $this->assign('roles', $roles);

        $this->assign('p', I('p', 1));
        $this->display();
    }

    public function ajaxDelTest()
    {
        $id = I('id');
        D('Exam')->where(array('id' => $id))->save(array('status' => -1));
        ajaxMsg(0, '删除成功');
    }

    public function ajaxDoPublish($id)
    {

        $exam = D('Exam')->find($id);
        $this->_checkExamStatus($exam);


        $subjects = D('ExamSubjectView')->findAllByExam($exam);

        //判断能否自动改卷,如果全部是标题和选择题的话，标记为自动批改
        $autoCorrect = 0;
        foreach ($subjects as $subject) {
            $type_num = $subject['type_num'];
            if ($type_num == 'choice' || $type_num == 'singleChoice' || $type_num == 'text') { } else {
                $autoCorrect = 1;
                break;
            }
        }


        $exam['auto_correct'] = $autoCorrect;
        $exam['status'] = 1;
        $exam['update_time'] = time();
        $exam['publish_time'] = time();
        D('Exam')->save($exam);
        ajaxMsg(0, 'success');
    }


    #测试列表
    public function index()
    {

        $auth = AdminUtil::auth();
        $map = array();
        if ($auth == 3) { //支部
            $branch = AdminUtil::auth_branch();
            $map['Exam.branch_id'] = $branch['id'];
        }

        $map['Exam.status'] = array('gt', -1);
        $keyword = I('keyword');
        if ($keyword) {
            $map['Exam.title'] = array('like', '%' . $keyword . '%');
        }
        $this->assign('search', array('keyword' => $keyword));

        $page = D('ExamView')->findPage($map, 15, 'Exam.create_time desc');
        foreach ($page['list'] as $index => $item) {
            $roles = D('ExamRoleView')->where(array('exam_id' => $item['id']))->select();
            $item['role_limit'] = $roles;
            $page['list'][$index] = $item;
        }
        $this->assign('page', $page);
        $this->display();
    }

    #发布取消发布测试
    public function changeExam()
    {

        $id = $_GET['id'];
        $exam_model = M('Exam');
        $condition = 'uid=' . admin_uid() . ' and id=' . $id . ' and status > -1';
        $exam = $exam_model->where($condition)->find();
        if ($exam) {
            $examModel = D('Exam');
            if ($exam['status'] == 0) {
                $exam['status'] = 1;
            } elseif ($exam['status'] == 1) {
                $exam['status'] = 0;
            }
            $examModel->save($exam);
        } else { }
        $this->redirect('index', array('p' => $_GET['p']));
    }

    /**
     * 移除
     */
    public function ajaxRemoveSubject()
    {
        $id = I('id');
        $subject = D('ExamSubject')->find($id);

        //判断试卷状态能否操作
        $examModel = D('Exam');
        $examId = $subject['exam_id'];
        $exam = $examModel->find($examId);
        $this->_checkExamStatus($exam);

        if ($subject) {
            if ($subject['status'] == 0) {
                D('ExamSubject')->delete($id);
            } else {
                $subject['status'] = -1;
                D('ExamSubject')->save($subject);
            }
            if ($examId) {
                $exam = $examModel->removeSubjectId($exam, $subject);
                $examModel->save($exam);
            }
            ajaxMsg(0, 'success', $subject);
        } else {
            ajaxMsg(1, '抱歉，没有找到对应的题目');
        }
    }

    public function ajaxShowCorrectStatus($examId)
    {

        $examModel = D('Exam');
        $exam = $examModel->find($examId);
        if ($exam) {
            $status = $exam['show_correct_status'];

            if ($status == 1)
                $status = 0;
            elseif ($status == 0)
                $status = 1;
            $exam['show_correct_status'] = $status;
            $examModel->save($exam);
            ajaxMsg(0, '');
        } else {
            ajaxMsg(1, '抱歉，没有找到你的试卷');
        }
    }

    public function ajaxUpSubject()
    {
        $id = I('id');
        $subject = D('ExamSubject')->find($id);

        //判断试卷状态能否操作
        $examModel = D('Exam');
        $examId = $subject['exam_id'];
        $exam = $examModel->find($examId);
        $this->_checkExamStatus($exam);

        if ($subject) {
            $exam = $examModel->upSubjectId($exam, $subject);
            $examModel->save($exam);
            ajaxMsg(0, 'success', $subject);
        } else {
            ajaxMsg(1, '抱歉，没有找到对应的题目');
        }
    }

    public function ajaxDownSubject()
    {
        $id = I('id');
        $subject = D('ExamSubject')->find($id);

        //判断试卷状态能否操作
        $examModel = D('Exam');
        $examId = $subject['exam_id'];
        $exam = $examModel->find($examId);
        $this->_checkExamStatus($exam);

        if ($subject) {
            $exam = $examModel->downSubjectId($exam, $subject);
            $examModel->save($exam);
            ajaxMsg(0, 'success', $subject);
        } else {
            ajaxMsg(1, '抱歉，没有找到对应的题目');
        }
    }

    public function ajaxInsertSubject($type, $id, $exam_id = null, $is_add, $self = false)
    {
        if ($is_add == false) {

            $subjectPre = D('ExamSubject')->find($id);
            $exam_id = $subjectPre['exam_id'];
        }


        $subjectType = D('ExamSubjectType')->where("type='$type'")->find();

        if ($exam_id && $subjectType) {
            $examModel = D('Exam');

            $exam = D('Exam')->find($exam_id);

            //判断试卷状态能否操作
            $this->_checkExamStatus($exam);

            $subject = array(
                'create_time' => time(),
                'update_time' => time(),
                'uid' => admin_uid() ? admin_uid() : 0,
                'type_id' => $subjectType['id'],
                'exam_id' => $exam_id,
            );

            //设置默认值
            if ($type == 'text') { //如果是简答题
                $subject['title'] = "";
            } elseif ($type == 'choice') { //如果是多选题
                $subject['score'] = 1;
                $subject['title'] = '';
                $subject['right_answer'] = '[1,0,0,0]';
                $subject['content'] = '["","","","",""]';

                $subject['right_answer_str'] = "A";
            } elseif ($type == 'singleChoice') { //如果是单选题
                $subject['score'] = 1;
                $subject['title'] = '';
                $subject['right_answer'] = '[1,0,0,0]';
                $subject['content'] = '["","","",""]';

                $subject['right_answer_str'] = "A";
            } elseif ($type == 'trueFalse') { //如果是单选题
                $subject['score'] = 1;
                $subject['title'] = '';
                $subject['right_answer'] = '[1,0]';
                $subject['content'] = '["正确","错误"]';

                $subject['right_answer_str'] = "正确";
            } elseif ($type == 'blank') { //如果是填空题
                $subject['score'] = 1;
                $subject['content'] = "";
                $subject['show_content'] = "";
                $subject['answer_count'] = 0;
            } elseif ($type == 'answer') { //如果是简答题
                $subject['score'] = 1;
                $subject['content'] = "";
                $subject['show_content'] = "";
            }
            $subject['remark'] = '';
            $subject['type_num'] = $type;
            //添加题目
            $id2 = D('ExamSubject')->add($subject);

            //考试添加题目id上去
            $subject['id'] = $id2;

            if ($subject) {
                if ($is_add == false) { //如果是插入
                    $exam = $examModel->insertSubjectId($exam, $id, $subject);
                    $examModel->save($exam);
                } else { //添加

                    $exam = $examModel->addSubjectId($exam, $subject);

                    $examModel->save($exam);
                }
            }
            //word导入用到的self自己调用
            if ($self) {
                return $subject;
            }
            ajaxMsg(0, 'success', $subject);
        } else {
            ajaxMsg(1, '抱歉，没有找到对应的创建类型');
        }
    }

    //已经抛弃了不用了
    public function ajaxAddSubject($type, $examId, $copyId = null)
    {
        $subjectType = D('ExamSubjectType')->findByType($type);
        if ($subjectType) {
            $examModel = D('Exam');
            $exam = $examModel->find($examId);
            //判断试卷状态能否操作
            $this->_checkExamStatus($exam);

            $subject = array(
                'create_time' => time(),
                'update_time' => time(),
                'uid' => admin_uid() ? admin_uid() : 0,
                'type_id' => $subjectType['id'],
                'exam_id' => $examId,
                'copy_id' => $copyId
            );
            //设置默认值
            if ($type == 'text') { //如果是简答题
                $subject['title'] = "标题内容";
            } elseif ($type == 'choice') { //如果是多选题
                $subject['score'] = 1;
                $subject['title'] = '填写多选题问题';
                $subject['right_answer'] = '[1,0,0,0]';
                $subject['content'] = '["填写答案A","填写答案B","填写答案C","填写答案D"]';
            } elseif ($type == 'singleChoice') { //如果是单选题
                $subject['score'] = 1;
                $subject['title'] = '填写多选题问题';
                $subject['right_answer'] = '[1,0,0,0]';
                $subject['content'] = '["填写答案A","填写答案B","填写答案C","填写答案D"]';
            } elseif ($type == 'blank') { //如果是填空题
                $subject['score'] = 1;
                $subject['content'] = "填空题内容";
            } elseif ($type == 'answer') { //如果是简答题
                $subject['score'] = 1;
                $subject['content'] = "简答题内容";
            }

            //添加题目
            $id = D('ExamSubject')->add($subject);

            //考试添加题目id上去
            $subject['id'] = $id;
            $exam = $examModel->addSubjectId($exam, $subject);
            $examModel->save($exam);

            ajaxMsg(0, 'success', array('id' => $id, 'type' => $type));
        } else {
            ajaxMsg(1, '抱歉，没有找到对应的创建类型');
        }
    }

    public function ajaxEditText($id, $title)
    {
        $subject = D('ExamSubjectView')->find($id);

        //判断试卷状态能否操作
        $examModel = D('Exam');
        $examId = $subject['exam_id'];
        $exam = $examModel->find($examId);
        $this->_checkExamStatus($exam);

        if ($subject) {
            $subjectModel = D('ExamSubject');
            $temp = $subjectModel->create($_POST);
            if ($temp) {
                $subject['status'] = 1;
                $subject['title'] = $title;
                $subject['remark'] = $_POST['remark'];
                $subject['update_time'] = time();
                D('ExamSubject')->save($subject);

                if ($exam) {
                    $exam = $examModel->changeSubject($exam, $subject);
                    $examModel->save($exam);
                }


                ajaxMsg(0, 'success', $subject);
            } else {
                ajaxMsg(1, $subjectModel->getError());
            }
        } else {
            ajaxMsg(1, '抱歉，没有找到对应的题目');
        }
    }

    public function ajaxEditSingle($id, $title, $score = 1, $is_answer, $choice,$remark, $self = false)
    {


        if ((int)$is_answer > 3 || (int)$is_answer < 0) {
            ajaxMsg(1, '请提交正确格式的内容');
        }

        $subject = D('ExamSubjectView')->find($id);

        //判断试卷状态能否操作
        $examModel = D('Exam');
        $examId = $subject['exam_id'];
        $exam = $examModel->find($examId);
        $this->_checkExamStatus($exam);

        $right_answer = array(0, 0, 0, 0);
        $right_answer[(int)$is_answer] = 1;

        if ($subject) {

            $subjectModel = D('ExamSubject');
            // $temp = $subjectModel->create($_POST);
            // if ($temp) {
            $subject['status'] = 1;
            $subject['title'] = $title;
            $subject['score'] = (int)$score > 0 ? (int)$score : 1;
            $subject['content'] = json_encode($choice, true);
            $subject['remark'] =$remark;
            $subject['right_answer'] = json_encode($right_answer, true);
            $subject['update_time'] = time();
            D('ExamSubject')->save($subject);


            if ($exam) {
                $exam = $examModel->changeSubject($exam, $subject);
                $examModel->save($exam);
            }

            $right_answerStr = array('A', 'B', 'C', 'D');
            $subject['right_answer_str'] = $right_answerStr[(int)$is_answer];

            if ($self) {
                return $subject;
            }
            ajaxMsg(0, 'success', $subject);
            // } else {
            //     ajaxMsg(1, $subjectModel->getError());
            // }
        } else {
            ajaxMsg(1, '抱歉，没有找到对应的题目');
        }
    }
    public function ajaxEditTrueFalse($id, $title, $score = 1, $is_answer, $choice)
    {

        if ((int)$is_answer > 1 || (int)$is_answer < 0) {
            ajaxMsg(1, '请提交正确格式的内容');
        }


        $subject = D('ExamSubjectView')->find($id);

        //判断试卷状态能否操作
        $examModel = D('Exam');
        $examId = $subject['exam_id'];
        $exam = $examModel->find($examId);
        $this->_checkExamStatus($exam);

        $right_answer = array(0, 0);
        $right_answer[(int)$is_answer] = 1;

        if ($subject) {

            $subjectModel = D('ExamSubject');
            $temp = $subjectModel->create($_POST);
            if ($temp) {
                $subject['status'] = 1;
                $subject['title'] = $title;
                $subject['score'] = (int)$score > 0 ? (int)$score : 1;
                $subject['content'] = json_encode($choice, true);
                $subject['remark'] = $_POST['remark'];
                $subject['right_answer'] = json_encode($right_answer, true);
                $subject['update_time'] = time();
                D('ExamSubject')->save($subject);


                if ($exam) {
                    $exam = $examModel->changeSubject($exam, $subject);
                    $examModel->save($exam);
                }

                $right_answerStr = array('正确', '错误');
                $subject['right_answer_str'] = $right_answerStr[(int)$is_answer];
                ajaxMsg(0, 'success', $subject);
            } else {
                ajaxMsg(1, $subjectModel->getError());
            }
        } else {
            ajaxMsg(1, '抱歉，没有找到对应的题目');
        }
    }

    public function ajaxEditChoice($id, $title, $score = 1, $is_answer, $choice,$remark, $self = false)
    {
        // $id = I('id');
        // $title = $_POST['title'];
        // $score = I('score');
        // $choice = I('choice');
        // $answer = I('is_answer');
        if ($is_answer) {
            $len = sizeof($is_answer);
        } else {
            $len = 0;
        }

        if ($len == 0) {
            ajaxMsg(1, "请至少选择一个正确答案");
        }
        $subject = D('ExamSubjectView')->find($id);

        $right_answer = array(0, 0, 0, 0, 0);
        foreach ($is_answer as $index) {
            $right_answer[$index] = 1;
        }

        //判断试卷状态能否操作
        $examModel = D('Exam');
        $examId = $subject['exam_id'];
        $exam = $examModel->find($examId);
        $this->_checkExamStatus($exam);

        if ($subject) {
            $subject['status'] = 1;
            $subject['title'] = $title;
            $subject['remark'] = $remark;
            $subject['score'] = $score;
            $subject['content'] = json_encode($choice, true);
            $subject['right_answer'] = json_encode($right_answer, true);
            $subject['update_time'] = time();
            D('ExamSubject')->save($subject);


            if ($exam) {
                $exam = $examModel->changeSubject($exam, $subject);
                $examModel->save($exam);
            }

            $right_answerStr = array('A', 'B', 'C', 'D', 'E');
            $show = "";
            foreach ($is_answer as $index => $value) {
                if ($index < $len - 1) {
                    $show = $show . $right_answerStr[$value] . '、';
                } else {
                    $show = $show . $right_answerStr[$value];
                }
            }

            $subject['right_answer_str'] = $show;
            if ($self) {
                return $subject;
            }
            ajaxMsg(0, 'success', $subject);
        } else {
            ajaxMsg(1, '抱歉，没有找到对应的题目');
        }
    }

    public function ajaxEditBlank($id, $score = 1, $answer, $content,$remark, $self = false)
    {
        // $id = $_POST['id'];
        // $score = $_POST['score'];
        // $answer = $_POST['answer'];
        // $content = $_POST['content'];
        //        $answer = htmlspecialchars_decode($answer);


        //判断是否有空的答案
        $len = 1;

        $objA = json_decode($answer, JSON_UNESCAPED_UNICODE);


        if ($objA) {
            foreach ($objA as $oo) {
                if ($oo == "") {
                    $len = 0;
                }
            }
        } else {
            $len = 0;
        }

        if ($len == 0) {
            ajaxMsg(1, "所有填空必须填写答案并保证至少有一个填空");
        }
        $subject = D('ExamSubjectView')->find($id);


        //判断试卷状态能否操作
        $examModel = D('Exam');
        $examId = $subject['exam_id'];
        $exam = $examModel->find($examId);
        $this->_checkExamStatus($exam);

        if ($subject) {
            $subject['status'] = 1;
            $subject['remark'] = $remark;
            $subject['score'] = $score ? $score : 1;
            $subject['content'] = $content;
            $subject['right_answer'] = $answer;
            $subject['update_time'] = time();
            $subject['title'] = '填空题';
            D('ExamSubject')->save($subject);

            if ($exam) {
                $exam = $examModel->changeSubject($exam, $subject);
                $examModel->save($exam);
            }

            $answerCount = substr_count($content, 'input-blank');
            $subject['answer_count'] = $answerCount;
            //            $subject['content'] = htmlspecialchars_decode($subject['content']);

            $subject = $this->_getShoBlank($subject);
            if ($self) {
                return $subject;
            }
            ajaxMsg(0, 'success', $subject);
        } else {
            if ($self) {
                return false;
            }
            ajaxMsg(1, '抱歉，没有找到对应的题目');
        }
    }

    public function ajaxEditAnswer($id, $score, $content)
    {

        $subject = D('ExamSubjectView')->find($id);

        //判断试卷状态能否操作
        $examModel = D('Exam');
        $examId = $subject['exam_id'];
        $exam = $examModel->find($examId);
        $this->_checkExamStatus($exam);

        if ($subject) {

            $subjectModel = D('ExamSubject');
            $temp = $subjectModel->create($_POST);
            if ($temp) {
                $subject['status'] = 1;
                $subject['score'] =  $score ? $score : 1;
                $subject['remark'] = $_POST['remark'];
                $subject['content'] = $content;
                $subject['update_time'] = time();
                D('ExamSubject')->save($subject);


                if ($exam) {
                    $exam = $examModel->changeSubject($exam, $subject);
                    $examModel->save($exam);
                }

                $subject['content'] = htmlspecialchars_decode($subject['content']);
                ajaxMsg(0, 'success', $subject);
            } else {
                ajaxMsg(1, $subjectModel->getError());
            }
        } else {
            ajaxMsg(1, '抱歉，没有找到对应的题目');
        }
    }

    public function ajaxFinishCorrect($examPaperId)
    {

        $examPaperModel = D('ExamPaper');
        $examPaper = $examPaperModel->find($examPaperId);

        if ($examPaper) {
            $exam = D('Exam')->find($examPaper['exam_id']);
            $this->_checkExamStatus($exam); //检测权限


            if ($examPaper['is_corrected'] == 0) { //当第一题提交批改
                //将题目得分统计如每道题里
                $scores = $examPaperModel->getScores($examPaper);
                $subjectMode = D('ExamSubject');
                foreach ($scores as $subjectId => $score) {
                    $subject = $subjectMode->find((int)$subjectId);
                    if ($subject) {
                        if ($score > 0) {
                            $subject['answer_right_count'] = $subject['answer_right'] + 1;
                            $subject['answer_score'] = $subject['answer_score'] + $score;
                        }
                        $subject['answer_count'] = $subject['answer_count'] + 1;
                        $subjectMode->save($subject);
                    }
                }
            }

            //消息生成
            $messageFun = $examPaper['status'] ? 'exam_re_correct_message' : 'exam_correct_message';
            D("Message/Message")->$messageFun(admin_uid(), $examPaper['uid'], $examPaper['exam_id']);


            //改变对应题目的分数并重新计算试卷分数
            $examPaper['is_corrected'] = 1;
            $examPaperModel->save($examPaper);

            //            $examPaperModel = D('ExamPaperView');
            //                $paper = $examPaperModel->findNext($examPaper['exam_id']);
            ajaxMsg(0, 'success');
            //            $paper = $examPaperModel->findNextByPaperId($examPaper['exam_id'], $examPaperId);
            //            if ($paper) {
            //                ajaxMsg(0, 'success');
            //            } else {
            //                ajaxMsg(1, '您已经批改完所有参考者的试卷了');
            //            }


        } else {
            ajaxMsg(1, '抱歉你操作的试卷走丢了');
        }
    }

    public function ajaxGetLastPaper($examPaperId)
    {


        $examPaperModel = D('ExamPaperView');
        $examPaper = $examPaperModel->find($examPaperId);
        if ($examPaper) {
            $paper = $examPaperModel->findLastByPaperId($examPaper['exam_id'], $examPaperId);
            if ($paper) {
                ajaxMsg(0, 'success');
            } else {
                ajaxMsg(1, '没有上一份了');
            }
        } else {
            ajaxMsg(1, '抱歉你操作的试卷走丢了');
        }
    }

    /**
     * @param $examPaperId
     * @param $subjectId
     * @param  $score [0,1,2] 数组方式
     */
    public function ajaxDoCorrect($examPaperId, $subjectId, $score = array(0))
    {
        //        ajaxMsg(1, to_json_string($_POST));
        $examPaperModel = D('ExamPaper');
        $examPaper = $examPaperModel->find($examPaperId);
        if ($examPaper) {
            $exam = D('Exam')->find($examPaper['exam_id']);
            $this->_checkExamStatus($exam); //检测权限

            //计算每题得分
            if ($examPaper['is_corrected'] == 1) { //当已经批改过了
                $scores = $examPaperModel->getScores($examPaper);
                $subjectMode = D('ExamSubject');
                $subject = $subjectMode->find((int)$subjectId);
                if ($subject) {
                    $oldScore = $scores[$subjectId . ''] ? $scores[$subjectId . ''] : 0;

                    $suScore = 0;
                    if (is_array($score)) {
                        foreach ($score as $s) {
                            $suScore = $suScore + $s;
                        }
                    } else {
                        $suScore = $score;
                    }
                    //                    ajaxMsg(1,to_json_string($scores));
                    if ($oldScore != $suScore) {
                        if ($oldScore > 0) { //还原原来分数
                            $subject['answer_right_count'] = $subject['answer_right'] - 1;
                            $subject['answer_score'] = $subject['answer_score'] - $oldScore;
                        }

                        if ($suScore > 0) {
                            $subject['answer_right_count'] = $subject['answer_right'] + 1;
                            $subject['answer_score'] = $subject['answer_score'] + $suScore;
                        }
                        $subjectMode->save($subject);
                    }
                }
            }

            //改变对应题目的分数并重新计算试卷分数
            $examPaper = $examPaperModel->changeScore($examPaper, $subjectId, $score);

            $examPaperModel->save($examPaper);
            ajaxMsg(0, 'success', $examPaper['exam_score']);
        } else {
            ajaxMsg(1, '抱歉你操作的试卷走丢了');
        }
    }

    public function correct($correctType, $examId = 0)
    {
        $entryType = I("entryType", "correct");
        $paperId = I('examPaperId', 0);
        $examPaperModel = D('ExamPaperView');
        if ($correctType == 'last') {
            if ($paperId != 0) {
                $paper = $examPaperModel->findLastByPaperId($examId, $paperId);

                $paper2 = $examPaperModel->findLastByPaper($examId, $paper);
                if ($paper2) {
                    $this->assign('hasLast', true);
                }
            } else {
                $paper = $examPaperModel->findNext($examId);
                $paper2 = $examPaperModel->findLastByPaper($examId, $paper);
                if ($paper2) {
                    $this->assign('hasLast', true);
                }
            }
            if ($paper) {
                $examId = $paper['exam_id'];
                $paper3 = $examPaperModel->findNextByPaper($examId, $paper);
                if ($paper3) {
                    $this->assign('hasNext', true);
                }
            } else {
                $this->assign('finishCorrect', '您已经批改完所有参考者的试卷了');
            }
        } elseif ($correctType == 'next') {
            if ($paperId != 0) {
                $paper = $examPaperModel->findNextByPaperId($examId, $paperId);

                $paper2 = $examPaperModel->findNextByPaper($examId, $paper);
                if ($paper2) {
                    $this->assign('hasNext', true);
                }
            } else {
                $paper = $examPaperModel->findNext($examId);

                if (!$paper) {
                    $exam = D('ExamView')->find($examId);
                    $this->assign('exam', $exam);
                    $this->assign('entryType', $entryType);
                    $this->assign('is_show', false);
                    $this->assign('show_title', '抱歉，该试卷无人答题，暂无答卷批改。');
                    $this->display();
                    exit;
                }

                $paper2 = $examPaperModel->findNextByPaper($examId, $paper);
                if ($paper2) {
                    $this->assign('hasNext', true);
                }
            }


            if ($paper) {
                $examId = $paper['exam_id'];
                $paper3 = $examPaperModel->findLastByPaper($examId, $paper);
                if ($paper3) {
                    $this->assign('hasLast', true);
                }
            } else {

                $this->assign('finishCorrect', '您已经批改完所有参考者的试卷了');
            }
        } else if ($correctType == 'correct') {
            $paper = $examPaperModel->findById($paperId);
            $examId = $paper['exam_id'];
            $paper2 = $examPaperModel->findLastByPaper($examId, $paper);
            if ($paper2) {
                $this->assign('hasLast', true);
            }

            $paper3 = $examPaperModel->findNextByPaper($examId, $paper);
            if ($paper3) {
                $this->assign('hasNext', true);
            }
        }
        $exam = D('ExamView')->find($examId);
        $this->assign('exam', $exam);
        $this->assign('entryType', $entryType);

        if ($paper) { //如果试卷存在

            $this->_checkExamStatusPage($exam, 'correct'); //检测权限

            $subjects = D('ExamSubjectView')->findAllByExam($exam);

            $userScore = to_json_obj($paper['answer_scores']);
            $userAnswer = to_json_obj($paper['answers']);


            foreach ($subjects as $index => $subject) {
                /***********放入用户答案**********/
                $subject['user_score'] = $userScore['' . $subject['id']];
                $subject['user_answer'] = $userAnswer['' . $subject['id']];

                /***********放入原题内容**********/
                if ($subject['type_num'] == 'choice') { //如果是多选题

                    //用户回答
                    $userA = array(0, 0, 0, 0);
                    foreach ($userAnswer['' . $subject['id']] as $select) {
                        $userA[(int)$select] = 1;
                    }
                    $subject['user_answer'] = $userA;

                    //解析显示的正确答案(A、B、C)
                    $right_answerStr = array('A', 'B', 'C', 'D');
                    $show = "";
                    $answer = json_decode($subject['right_answer']);
                    $right_answerS = array();
                    $righr_answer_indexs = array();
                    foreach ($answer as $index2 => $value) {
                        if ($value == 1) {
                            $righr_answer_indexs[(string)$index2] = 1;
                            array_push($right_answerS, $right_answerStr[$index2]);
                        }
                    }
                    $len = sizeof($right_answerS);
                    foreach ($right_answerS as $index2 => $s) {
                        if ($index2 < $len - 1) {
                            $show = $show . $s . '、';
                        } else {
                            $show = $show . $s;
                        }
                    }
                    $subject['right_answer_str'] = $show;
                    $subject['righr_answer_indexs'] = $righr_answer_indexs;

                    //解析答案内容
                    $subject['answer'] = json_decode($subject['content'], true);
                } elseif ($subject['type_num'] == 'singleChoice') { //如果是单选题

                    //用户回答
                    $subject['user_answer'] = $userAnswer['' . $subject['id']];

                    //解析显示正确答案(A)
                    $right_answerStr = array('A', 'B', 'C', 'D');
                    $answer = json_decode($subject['right_answer'], true);
                    $righr_answer_indexs = array();
                    foreach ($answer as $index2 => $value) {
                        if ($value == 1) {
                            $righr_answer_indexs[(string)$index2] = 1;
                            $show = $right_answerStr[$index2];
                        }
                    }
                    $subject['right_answer_str'] = $show;
                    $subject['righr_answer_indexs'] = $righr_answer_indexs;

                    //解析答案内容
                    $subject['answer'] = json_decode($subject['content'], true);
                } elseif ($subject['type_num'] == 'blank') { //如果是填空题

                    //用户回答
                    $subject['user_answer'] = $userAnswer['' . $subject['id']];

                    //解析html 转义字符
                    $answerCount = substr_count($subject['content'], 'input-blank');
                    $subject['answer_count'] = $answerCount;
                    $subject['content'] = $subject['content'] ? htmlspecialchars_decode($subject['content']) : "";

                    $answer = to_json_obj($subject['right_answer']);
                    $righA = "";
                    $userAnswerS = "";
                    $showContent = $subject['content'];
                    foreach ($answer as $index2 => $value) {
                        $ua = $subject['user_answer'][$index2];
                        if (!$ua) {
                            $ua = "&nbsp;&nbsp;";
                        }
                        $showContent = str_replace("value=\"" . $value . "\"", "value=\"" . $ua . "\" style=\"display:none\"", $showContent);
                        $userAnswerS = $userAnswerS . "<span style='padding: 0 10px;border-bottom: 1px solid black;margin-left: 10px;margin-right: 10px'>" . $ua . "</span>";
                        $righA = $righA . '<span style="display:block">' . ($index2 + 1) . '.' . $value . "</span>";
                        $subject['content'] = str_replace("value=\"" . $value . "\"", "value=\"" . $ua . "\"", $subject['content']);

                        $righA = $righA . '<span style="display:block">' . ($index2 + 1) . '.' . $value . "</span>";
                    }

                    $subject['show_content'] = str_replace_once("<input class=", $userAnswerS . "<input class=", $showContent);


                    $subject['right_answer_str'] = $righA;
                } elseif ($subject['type_num'] == 'answer') { //如果是简答题
                    //解析html 转义字符
                    $subject['content'] = $subject['content'] ? htmlspecialchars_decode($subject['content']) : "";
                    $subject['user_answer'][0] = $subject['user_answer'][0] ? htmlspecialchars_decode($subject['user_answer'][0]) : "";
                }

                //重新赋值
                $subjects[(int)$index] = $subject;
            }


            $this->assign('examPaper', $paper);
            $this->assign('subjects', $subjects);

            $showname = show_name($paper, 'user_');
            $this->setTitle("批改 " . $showname . ' 的测试');
        } else {
            $this->assign('entryType', $entryType);
            $this->assign('is_show', false);
            $this->assign('show_title', '抱歉，没有找到你要批改的试卷');
        }
        $this->display();
    }


    #新增测试
    public function ajaxSaveTest()
    {
        $id = I('id');
        $title = I('title');
        $status = I('status', 1);
        $end_time = I('end_time');
        //      $role_limit = I('role_limit');
        $type = I('type', 0);
        $answer_type = I('answer_type', 1);
        if (!$title) {
            ajaxMsg(1, "请先填写标题");
        }
        if (!$end_time) {
            ajaxMsg(1, "请选择结束日期");
        }
        //      if(!$role_limit){
        //          ajaxMsg(1, '查看限制至少选择1个');
        //      }
        //
        //      $sizeRole = sizeof($role_limit);
        //      if ($sizeRole < 1) {
        //          ajaxMsg(1, '查看限制至少选择1个');
        //      }

        $array = array(
            'type' => $type,
            'answer_type' => $answer_type,
            'title' => $title,
            'intro' => I('intro'),
            'end_time' => strtotime($end_time),
        );
        if ($id) {
            $item = D('Exam')->find($id);
            $oldStatus = $item['status'];
            if ($oldStatus < 0) {
                ajaxMsg(1, '该活动已经删除了');
            }
            $array['update_time'] = time();
            $array['publish_time'] = time();
            $array['status'] = $status;
            D('Exam')->where(array('id' => $id))->save($array);


            //          D('ExamRole')->where(array('exam_id' => $id))->delete();
            //          foreach ($role_limit as $item) {
            //              D('ExamRole')->add(array('exam_id' => $id, 'role_id' => $item));
            //          }
            ajaxMsg(0, '保存成功');
        } else {
            $auth = AdminUtil::auth();
            if ($auth == 3) { //支部
                $branch = AdminUtil::auth_branch();
                $array['branch_id'] = $branch['id'];
            }
            $admin = AdminUtil::admin();
            $array['uid'] = $admin['uid'];
            $array['status'] = $status;
            $array['publish_time'] = time();
            $array['update_time'] = time();
            $array['create_time'] = time();
            // $array = set_save_auth($array);
            $id = D('Exam')->add($array);
            //
            //          foreach ($role_limit as $item) {
            //              D('ExamRole')->add(array('exam_id' => $id, 'role_id' => $item));
            //          }
            ajaxMsg(0, '保存成功');
        }
    }


    #答题名单
    public function manage()
    {
        $exam_id = I('test_id');
        $exam = D('Exam')->where(array('id' => $exam_id))->find();
        $branch_id = I('id');
        $branch = D('PartyBranch')->find($branch_id);
        if ($exam && $branch) {
            $this->assign('branch', $branch);
            $page = D('UserView')->findPage("User.branch_id=$branch_id", 15, "User.sort desc");
            foreach ($page['list'] as $index => $item) {
                $item['test'] = D('ExamPaperView')->where(array('exam_id' => $exam_id, 'uid' => $item['uid']))->limit(1)->find();

                $page['list'][$index] = $item;
            }

            $exam['count_people'] = D('User')->where("branch_id=$branch_id")->count();

            //统计已批改的平均分
            $avgScore = D('ExamPaper')->where(array('exam_id' => $exam_id, 'is_corrected' => 1, 'branch_id' => $branch_id))->avg('exam_score');
            $exam['avg_score'] = $avgScore;
            //统计及格人数
            $passScore = $exam['score'] * 0.6;
            $passCount = D('ExamPaper')->where(
                array('exam_id' => $exam_id, 'exam_score' => array('egt', $passScore), 'is_corrected' => 1, 'branch_id' => $branch_id)
            )->count();
            $exam['pass_count'] = $passCount;
            //统计已经批改
            $exam['corrected_count'] = D('ExamPaper')->where(
                array('exam_id' => $exam_id, 'is_corrected' => 1, 'branch_id' => $branch_id)
            )->count();
            //统计优秀人数
            $goodScore = $exam['score'] * 0.8;
            $goodCount = D('ExamPaper')->where(
                array('exam_id' => $exam_id, 'exam_score' => array('egt', $goodScore), 'is_corrected' => 1, 'branch_id' => $branch_id)
            )->count();
            $exam['exam_count'] = D('ExamPaper')->where(
                array('exam_id' => $exam_id, 'branch_id' => $branch_id)
            )->count();
            $exam['good_count'] = $goodCount;
            $this->assign('detail', $exam);

            $this->assign('page', $page);
            $this->setTitle($branch['name'] . "测试管理");
        }
        $this->assign('p', I('p', 1));
        $this->display();
    }

    #答题名单
    public function branchs()
    {
        $exam_id = I('id');
        $exam = D('Exam')->where(array('id' => $exam_id))->find();
        if ($exam) {
            $page = D('PartyBranchView')->findPage("", 15, "PartyBranch.sort desc");
            foreach ($page['list'] as $index => $item) {
                $item['count_total'] = D('ExamPaper')->where(array('exam_id' => $exam_id, 'branch_id' => $item['id']))->count();
                $avgScore = D('ExamPaper')->where(array('exam_id' => $exam_id, 'branch_id' => $item['id'], 'is_corrected' => 1))->avg('exam_score');
                $item['avg'] = $avgScore ? $avgScore : 0;

                $passScore = $exam['score'] * 0.6;
                $passCount = D('ExamPaper')->where(
                    array('exam_id' => $exam_id, 'branch_id' => $item['id'], 'exam_score' => array('egt', $passScore), 'is_corrected' => 1)
                )->count();
                $item['count_pass'] = $passCount;

                $unpassCount = D('ExamPaper')->where(
                    array('exam_id' => $exam_id, 'branch_id' => $item['id'], 'exam_score' => array('lt', $passScore), 'is_corrected' => 1)
                )->count();
                $item['count_people'] = D('User')->where(array('branch_id' => $item['id']))->count();

                $item['count_unpass'] = $unpassCount;
                $item['count_unpg'] = $item['count_total'] - $unpassCount - $passCount;


                $page['list'][$index] = $item;
            }

            $exam['exam_count'] = D('ExamPaper')->where(
                array('exam_id' => $exam_id)
            )->count();

            //统计已批改的平均分
            $avgScore = D('ExamPaper')->where(array('exam_id' => $exam_id, 'is_corrected' => 1))->avg('exam_score');
            $exam['avg_score'] = $avgScore ? $avgScore : 0;
            //统计及格人数
            $passScore = $exam['score'] * 0.6;
            $passCount = D('ExamPaper')->where(
                array('exam_id' => $exam_id, 'exam_score' => array('egt', $passScore), 'is_corrected' => 1)
            )->count();
            $exam['pass_count'] = $passCount;
            //统计已经批改
            $exam['corrected_count'] = D('ExamPaper')->where(
                array('exam_id' => $exam_id, 'is_corrected' => 1)
            )->count();
            //统计优秀人数
            $goodScore = $exam['score'] * 0.8;
            $goodCount = D('ExamPaper')->where(
                array('exam_id' => $exam_id, 'exam_score' => array('egt', $goodScore), 'is_corrected' => 1)
            )->count();
            $exam['good_count'] = $goodCount;
            $this->assign('detail', $exam);

            $this->assign('page', $page);
            $this->setTitle("测试管理");
        }
        $this->assign('p', I('p', 1));
        $this->display();
    }


    #答题名单
    public function analysis()
    {
        $exam_id = $_GET[id];
        $exam_model = M('Exam');
        $exam = $exam_model->where(array('id' => $exam_id))->find();
        if ($exam) {
            $page = D('ExamPaperView')->findMyPageByUid($exam_id);

            //统计已批改的平均分
            $avgScore = D('ExamPaper')->where(array('exam_id' => $exam_id, 'is_corrected' => 1))->avg('exam_score');
            $exam['avg_score'] = $avgScore;
            //统计及格人数
            $passScore = $exam['score'] * 0.6;
            $passCount = D('ExamPaper')->where(
                array('exam_id' => $exam_id, 'exam_score' => array('egt', $passScore), 'is_corrected' => 1)
            )->count();
            $exam['pass_count'] = $passCount;
            //统计已经批改
            $exam['corrected_count'] = D('ExamPaper')->where(
                array('exam_id' => $exam_id, 'is_corrected' => 1)
            )->count();
            //统计优秀人数
            $goodScore = $exam['score'] * 0.8;
            $goodCount = D('ExamPaper')->where(
                array('exam_id' => $exam_id, 'exam_score' => array('egt', $goodScore), 'is_corrected' => 1)
            )->count();
            $exam['good_count'] = $goodCount;
            $this->assign('exam', $exam);

            $subjects = D('ExamSubjectView')->findAllByExam($exam);

            foreach ($subjects as $index => $subject) {
                if ($subject['type_num'] == 'choice') { //如果是多选题

                    //解析显示的正确答案(A、B、C)
                    $right_answerStr = array('A', 'B', 'C', 'D');
                    $show = "";
                    $answer = json_decode($subject['right_answer']);
                    $right_answerS = array();
                    foreach ($answer as $index2 => $value) {
                        if ($value == 1) {
                            array_push($right_answerS, $right_answerStr[$index2]);
                        }
                    }
                    $len = sizeof($right_answerS);
                    foreach ($right_answerS as $index2 => $s) {
                        if ($index2 < $len - 1) {
                            $show = $show . $s . '、';
                        } else {
                            $show = $show . $s;
                        }
                    }
                    $subject['right_answer_str'] = $show;

                    //解析答案内容
                    $subject['answer'] = json_decode($subject['content'], true);
                } elseif ($subject['type_num'] == 'singleChoice') { //如果是单选题
                    //解析显示正确答案(A)
                    $right_answerStr = array('A', 'B', 'C', 'D');
                    $answer = json_decode($subject['right_answer'], true);
                    foreach ($answer as $index2 => $value) {
                        if ($value == 1) {
                            $show = $right_answerStr[$index2];
                        }
                    }
                    $subject['right_answer_str'] = $show;
                    //解析答案内容
                    $subject['answer'] = json_decode($subject['content'], true);
                } elseif ($subject['type_num'] == 'blank') { //如果是填空题
                    //解析html 转义字符
                    $answerCount = substr_count($subject['content'], 'input-blank');
                    $subject['answer_count'] = $answerCount;
                    $subject['content'] = $subject['content'] ? htmlspecialchars_decode($subject['content']) : "";

                    //替换显示
                    //                $userAnswerS = "";
                    //                $showContent = $subject['content'];
                    //                foreach (to_json_obj($subject['right_answer']) as $index2 => $value) {
                    //                    if(!$value){
                    //                        $value = "&nbsp;&nbsp;";
                    //                    }
                    //                    $showContent = str_replace("value=\"".$value."\"", "value=\"".$value."\" style=\"display:none\"", $showContent);
                    //                    $userAnswerS = $userAnswerS."<span style='padding: 0 10px;border-bottom: 1px solid black;margin-left: 10px;margin-right: 10px'>".$value."</span>";
                    //
                    //                }
                    $subject = $this->_getShoBlank($subject); //['show_content'] = str_replace_once("<input class=", $userAnswerS."<input class=", $showContent);


                } elseif ($subject['type_num'] == 'answer') { //如果是简答题
                    //解析html 转义字符
                    $subject['content'] = $subject['content'] ? htmlspecialchars_decode($subject['content']) : "";
                }
                //重新赋值
                $subjects[(int)$index] = $subject;
            }


            $this->assign('subjects', $subjects);

            $this->assign('page', $page);
            $this->setTitle("测试管理");
        }
        $this->display();
    }


    public function  subjectManage($id)
    {
        $exam = D('ExamView')->find($id);
        $this->assign('detail', $exam);
        $this->assign('p', I('p', 1));
        $this->display();
    }


    /*****
     * 测试编辑发布页面
     * @param $id
     */
    public function subjectEdit($id)
    {
        $exam = D('ExamView')->find($id);

        $this->_checkExamStatusPage($exam, 'publish');

        //        if ($exam['ststus'] == 1) {//发布状态下 会将状态改为编辑状态
        //            $exam['ststus'] = 0;
        //            D('Exam')->save($exam);
        //        }

        $this->assign('detail', $exam);
        $subjects = D('ExamSubjectView')->findAllByExam($exam);

        foreach ($subjects as $index => $subject) {
            if ($subject['type_num'] == 'choice') { //如果是多选题

                //解析显示的正确答案(A、B、C)
                $right_answerStr = array('A', 'B', 'C', 'D', 'E');
                $show = "";
                $answer = json_decode($subject['right_answer']);
                $right_answerS = array();
                foreach ($answer as $index2 => $value) {
                    if ($value == 1) {
                        array_push($right_answerS, $right_answerStr[$index2]);
                    }
                }
                $len = sizeof($right_answerS);
                foreach ($right_answerS as $index2 => $s) {
                    if ($index2 < $len - 1) {
                        $show = $show . $s . '、';
                    } else {
                        $show = $show . $s;
                    }
                }
                $subject['right_answer_str'] = $show;

                //解析答案内容
                $subject['answer'] = json_decode($subject['content'], true);
            } elseif ($subject['type_num'] == 'singleChoice') { //如果是单选题
                //解析显示正确答案(A)
                $right_answerStr = array('A', 'B', 'C', 'D',);
                $answer = json_decode($subject['right_answer'], true);
                foreach ($answer as $index2 => $value) {
                    if ($value == 1) {
                        $show = $right_answerStr[$index2];
                    }
                }
                $subject['right_answer_str'] = $show;
                //解析答案内容
                $subject['answer'] = json_decode($subject['content'], true);
            } elseif ($subject['type_num'] == 'trueFalse') { //如果是判断题
                //解析显示正确答案(A)
                $right_answerStr = array('正确', '错误');
                $answer = json_decode($subject['right_answer'], true);
                foreach ($answer as $index2 => $value) {
                    if ($value == 1) {
                        $show = $right_answerStr[$index2];
                    }
                }
                $subject['right_answer_str'] = $show;
                //解析答案内容
                $subject['answer'] = json_decode($subject['content'], true);
            } elseif ($subject['type_num'] == 'blank') { //如果是填空题
                //解析html 转义字符
                $answerCount = substr_count($subject['content'], 'input-blank');
                $subject['answer_count'] = $answerCount;
                $subject['content'] = $subject['content'] ? htmlspecialchars_decode($subject['content']) : "";

                //替换显示
                //                $userAnswerS = "";
                //                $showContent = $subject['content'];
                //                foreach (to_json_obj($subject['right_answer']) as $index2 => $value) {
                //                    if(!$value){
                //                        $value = "&nbsp;&nbsp;";
                //                    }
                //                    $showContent = str_replace("value=\"".$value."\"", "value=\"".$value."\" style=\"display:none\"", $showContent);
                //                    $userAnswerS = $userAnswerS."<span style='padding: 0 10px;border-bottom: 1px solid black;margin-left: 10px;margin-right: 10px'>".$value."</span>";
                //
                //                }
                $subject = $this->_getShoBlank($subject); //['show_content'] = str_replace_once("<input class=", $userAnswerS."<input class=", $showContent);


            } elseif ($subject['type_num'] == 'answer') { //如果是简答题
                //解析html 转义字符
                $subject['content'] = $subject['content'] ? htmlspecialchars_decode($subject['content']) : "";
            }
            //重新赋值
            $subjects[(int)$index] = $subject;
        }

        $this->assign('subjects', $subjects);

        $this->display();
    }


    private function _checkExamStatus($exam)
    {
        if (!$exam) {
            ajaxMsg(4, '抱歉，没有找到这份测试');
        } elseif ($exam['status'] < 0) {
            ajaxMsg(2, '抱歉，该测试已经被删除了');
        } elseif ($exam['status'] == 2) {
            ajaxMsg(3, '抱歉，该测试已经被禁用了');
        }
    }

    /**
     * 测试状态页面返回
     * @param $exam
     */
    private function _checkExamStatusPage($exam, $display = '')
    {
        if (!$exam) {
            $this->assign('is_show', false);
            $this->setTitle('测试不存在或已被删除');
            $this->assign('show_title', '测试不存在或已被删除');
            $this->display($display);
            exit();
        } elseif ((int)$exam['status'] < 0) {
            $this->assign('is_show', false);
            $this->setTitle('测试不存在或已被删除');
            $this->assign('show_title', '测试不存在或已被删除');
            $this->display($display);
            exit();
        } elseif ($exam['status'] == 2) { //不做操作
            $this->setTitle('编辑《' . $exam['title'] . "》");
            //            ajaxMsg(3, '抱歉，你的试卷已经被禁用了');
        }
        $this->assign('is_show', true);
    }

    private function _getShoBlank($subject)
    {
        //替换显示
        $userAnswerS = "";
        $showContent = $subject['content'];
        foreach (to_json_obj($subject['right_answer']) as $index2 => $value) {
            if (!$value) {
                $value = "&nbsp;&nbsp;";
            }

            $showContent = str_replace("value=\"" . $value . "\"", "value=\"" . $value . "\" disabled=\"true\"", $showContent);
            //            $userAnswerS = $userAnswerS . "<span style='padding: 0 10px;display:inline-block;min-width:170px;padding-bottom:0px;border-bottom: 1px solid black;margin-left: 10px;margin-right: 10px'>" . $value . "</span>";

        }
        //  var_dump($showContent);
        $subject['show_content'] = str_replace_once("<input class=", $userAnswerS . "<input class=", $showContent);

        return $subject;
    }
    
    public function uploadExam()
    {
        # code...
        // $return = $this->examImport('/Uploads/exam_import/2019-06-04/shiti.docx',100);
        // exit;
        $exam_id = I('exam_id');
        $res = uploadAnnex('exam_import', 'exam_import', uid());
        if (!empty($res['url'])) {
           
            $this->examImport($res['url'],$exam_id);
        
            ajaxMsg(0, 'success', $res);
        } else {
            ajaxMsg(1, '更新失败' , $res);
        }
    }
    public function examImport($file_path,$exam_id)
    {
        if(!$exam_id){
            return false;
        }
        // 截取目录
        $qianzhui = substr($file_path,0,strrpos($file_path,'/'));
      
        vendor('Docxtotext.Docx2Text');
        // // 实例化
        $text = new \Docx2Text();

        // 加载docx文件
        $t1 = $text->setDocx('.'.$file_path);

        // 将内容存入$docx变量中
        $html = $text->extract();
        // 调试输出
        // $html = htmlentities($html);
       
        $path = '.'.$qianzhui.'/wordtemp'.time().'.txt';
        file_put_contents($path, $html);
        //暂时思路 读取 然后做字符串操作 获取前三个字符判断题目类型。 然后截取题目 然后把已截取题目删除，重复刚才的操作
        $html = file_get_contents($path);
        // $html = iconv("gb2312", "utf-8//IGNORE", $html);
    
        
        $end = '#end#';
        do {
            $ti = 0;
            // for ($ti = 0; $ti < 2; $ti++) { //之后要换回do-while
            $type = substr($html, 0, 3);
            //截取单双题的顺序 不能打乱
            $subject = substr($html, 3, strpos($html, $end) - 4); //整个题目包括选项
            $del = substr($html, 0, strpos($html, $end) + 5);
            $html = trim(str_replace($del, " ", $html));
            //
            //   echo $subject;

            //初始化题目

            //判断题目类型
            switch ($type) {
                case '#s#':
                    //获取答案
                    // echo $single;
                    $answer_lsign = "&lt;";
                    $answer_rsign = "&gt;";
                    $title = substr($subject, 0, strpos($subject, $answer_lsign));

                    // echo $subject;

                    $rsign = substr($subject, 0, strrpos($subject, $answer_rsign));
                    $answer = substr($rsign, strpos($subject, $answer_lsign) + 4);
                    $remark = '答案是:'.$answer;
                    //获取答案截取ABCD
                    $option_str = substr($subject, strrpos($subject, $answer_rsign) + 1);
                    $option_str = trim(str_replace(PHP_EOL, '', $option_str)); //删除换行
                    //以.作为分隔符
                    $option_arr = explode('.', $option_str);
                    $option_total = array();
                    for ($i = 1; $i < count($option_arr); $i++) {
                        //从一开始是因为不需要用到A 详细请看$option_str字符
                        //判断最后一个count($option_arr)-1
                        if ($i != count($option_arr) - 1) {
                            //需要截取最后一个字符
                            $option_total[] = substr($option_arr[$i], 0, strlen($option_arr[$i]) - 1);
                        } else {
                            $option_total[] = $option_arr[$i];
                        }
                    }
                    //根据题型生成具体答案
                    $single_answer_model = ['A', 'B', 'C', 'D'];
                    for ($si = 0; $si < 4; $si++) {
                        if ($single_answer_model[$si] == $answer) {
                            $is_answer = $si;
                            break;
                        }
                    }
                    //整理好题目之后 需要调用一个新增题目的
                    //第一题 第二个参数是'' 后面题目第二参数是前一题的id
                    if ($ti == 0) {
                        $_return_exam_subject = $this->ajaxInsertSubject('singleChoice', '', $exam_id, true, true);
                    } else {
                        //找exam中subject_id中最后一个值
                        $exam = D('exam')->find($exam_id);
                        $obj_ids = to_json_obj($exam['subject_ids']);
                        $last_id = end($obj_ids);
                        $_return_exam_subject = $this->ajaxInsertSubject('singleChoice', $last_id, $exam_id, false, true);
                    }
                    $this->ajaxEditSingle($_return_exam_subject['id'], $title, 1, $is_answer, $option_total,$remark, true);
                    //到这里基本就插入成功;
                    break;
                case '#m#':
                    //获取答案
                        $answer_lsign = '&lt;';
                        $answer_rsign = '&gt;';
                        $title = substr($subject, 0, strpos($subject, $answer_lsign));
                       
                        $rsign = substr($subject, 0, strrpos($subject, $answer_rsign));
                        $answer = substr($rsign, strpos($subject, $answer_lsign) + 4);
                        $remark = '答案是:'.$answer;
                        //获取答案截取ABCD
                        $option_str = substr($subject, strrpos($subject, $answer_rsign) + 1);
                        $option_str = trim(str_replace(PHP_EOL, '', $option_str)); //删除换行
                        //以.作为分隔符
                        $option_arr = explode('.', $option_str);
                        $option_total = array();
                        $answer_arr = array();
                        $is_answer = array();
                        for ($i = 1; $i < count($option_arr); $i++) {
                            //从一开始是因为不需要用到A 详细请看$option_str字符
                            //判断最后一个count($option_arr)-1
                            if ($i != count($option_arr) - 1) {
                                //需要截取最后一个字符
                                $option_total[] = substr($option_arr[$i], 0, strlen($option_arr[$i]) - 1);
                            } else {
                                $option_total[] = $option_arr[$i];
                            }
                        }

                        //根据题型生成具体答案
                        for ($ai = 0; $ai < strlen($answer); $ai++) {
                            $answer_arr[] = substr($answer, $ai, 1);
                        }

                        // var_dump($answer_arr);
                        $choice_answer_model = ['A', 'B', 'C', 'D', 'E'];
                        for ($si = 0; $si < count($choice_answer_model); $si++) {
                            foreach ($answer_arr as $v) {
                                if ($choice_answer_model[$si] == $v) {
                                    $is_answer[] = $si;
                                    break;
                                }
                            }
                        }
                        // echo $title;
                    //    var_dump($is_answer);
                        // var_dump($option_total);
                        // var_dump($is_answer);
                        //整理好题目之后 需要调用一个新增题目的
                        //第一题 第二个参数是'' 后面题目第二参数是前一题的id
                        if ($ti == 0) {
                            $_return_exam_subject = $this->ajaxInsertSubject('choice', '', $exam_id, true, true);
                        } else {
                            //找exam中subject_id中最后一个值
                            $exam = D('exam')->find($exam_id);
                            $obj_ids = to_json_obj($exam['subject_ids']);
                            $last_id = end($obj_ids);
                            $_return_exam_subject = $this->ajaxInsertSubject('choice', $last_id, $exam_id, false, true);
                        }
                        //   var_dump($_return_exam_subject);
                    
                        $this->ajaxEditChoice($_return_exam_subject['id'], $title, 1, $is_answer, $option_total,$remark, true);
                    // //到这里基本就插入成功;

                    break;
                case '#b#':
                    // <p>填空题<input style="border: 0;border-bottom: 1px solid;margin: 0 10px;" class="input-blank form-control" value="43" placeholder="请输入答案" name="subject-803[]"/><input style="border: 0;border-bottom: 1px solid;margin: 0 10px;" class="input-blank form-control" value="423423" placeholder="请输入答案" name="subject-803[]"/></p>
                    //获取答案
                    $answer_lsign = '&lt;';
                    $answer_rsign = '&gt;';
                    $temp = $subject;
                    $cut_blank_flag = true;
                    $bi = 0;
                    $stem = array();
                    $blank_answer = array();
                    do {
                        //  for ($bi = 0; $bi < 2; $bi++) {
                        if (strpos($temp, $answer_lsign) > 0) {
                            //截取开头到第一个<
                            if ($bi == 0) {
                                //开头题干截取
                                $stem[] = substr($temp, 0, strpos($temp, $answer_lsign));
                            } else {
                                //中间部分
                                $cut = substr($temp, 0, strpos($temp, $answer_lsign));
                                $str = strlen($blank_answer[$bi - 1]) + 4;
                                $stem[] = substr($cut, $str);
                            }
                            $temp = substr($temp, strpos($temp, $answer_lsign) + 4);
                            $temp = trim($temp);
                            //截取第一个< 到第一个>
                            $blank_answer[] = substr($temp, 0, strpos($temp, $answer_rsign));
                        } else {
                            //这里是最后一个题干截取，不能少
                            $str = strlen($blank_answer[$bi - 1]) + 4;
                            $stem[] = substr($temp, $str);
                            $cut_blank_flag = false;
                        }
                        //  }
                        $bi++;
                    } while ($cut_blank_flag);
              
                    //  var_dump($blank_answer);
                    // //先新增一个空的subject
                    if ($ti == 0) {
                        $_return_exam_subject = $this->ajaxInsertSubject('blank', '', $exam_id, true, true);
                    } else {
                        //找exam中subject_id中最后一个值
                        $exam = D('exam')->find($exam_id);
                        $obj_ids = to_json_obj($exam['subject_ids']);
                        $last_id = end($obj_ids);
                        $_return_exam_subject = $this->ajaxInsertSubject('blank', $last_id, $exam_id, false, true);
                    }
                    //    var_dump($_return_exam_subject);
                    $total_count_stem = count($stem);


                    $blank_str = "<p>";
                    $remark = '';//相当于放了答案
                    // $blank_str = '&lt'.'p'.'&gt';
                    // echo $blank_str;
                    //在组合之前先调用
                    for ($stem_i = 0; $stem_i < $total_count_stem; $stem_i++) {
                        if ($stem_i != $total_count_stem - 1) {
                            $blank_str .= $stem[$stem_i] . "<input style='border: 0;border-bottom: 1px solid;margin: 0 10px;' class='input-blank form-control' value='" . $blank_answer[$stem_i] . "' placeholder='请输入答案' name='subject-" . $_return_exam_subject['id'] . "[]' />";

                            $remark .= $stem[$stem_i].' '.$blank_answer[$stem_i]. ' ';
                        } else {
                            //最后一个
                            $last_p = "</p>"; //显示问题
                            $blank_str .= $stem[$stem_i] . $last_p;
                            $remark .= $stem[$stem_i];
                        }
                       
                    }
                   
                    $json_answer = json_encode($blank_answer);
                    // $remark = implode(',',$blank_answer);
                    $this->ajaxEditBlank($_return_exam_subject['id'], 1 , $json_answer,  $blank_str,$remark,true);
                
                    break;
            }
            $ti++;
        } while (strlen($html));

        return true;
    }
}
