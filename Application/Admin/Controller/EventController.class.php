<?php
namespace Admin\Controller;

use Common\Controller\BaseController;
use Think\Controller;


/**
 * 支部管理
 * Class SystemController
 * @package Admin\Controller
 */
class EventController extends BaseAdminController
{

    function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->set_sidebar_module('App');
        $this->set_sidebar_sub('Event');
    }
    // 支部列表页
    public function index()
    {

        $admin = admin();
        $auth = session_auth();
        $map = array();
        if ($auth == 2) {//总支
            $map['Event.branch_hq_id'] = $admin['admin_branch_hq_id'];
        }
        if ($auth == 3) {//支部
            $map['Event.branch_id'] = intval($admin['admin_branch_id']);
        }


        // 获得所有符合条件的支部
        $keyword = I('keyword');
        $map['Event.status'] = array('gt', -1);
        if ($keyword) {
            $map['Event.title'] = array('like', '%' . $keyword . '%');
        }


        $page = D('EventView')->find_page($map, '', '', 'id desc');
//        echo to_json_string($map);
//        echo to_json_string($page);
//        exit;
        $this->assign('keyword', $keyword);
        $this->assign('page', $page);
        $this->display();
    }

    public function eventEdit()
    {
        $id = I('id');
        if ($id) {
            $map['Event.id'] = $id;
            $map['Event.status'] = array('gt', -1);
            $detail = D('EventView')->where($map)->find();

            $roles = D('EventRole')->where(array('event_id' => $id))->select();
            $branch_id = $roles[0]['branch_id'];
            $detail['role_limit'] = $roles;
            $this->assign('event_roles', D('EventRole')->where(array('event_id' => $id))->select());
            $this->assign('detail', $detail);
            $this->assign('branch_id', $branch_id);
        }

        $branch_list = D('PartyBranch')->field('id,name')->select();
        $roles = D('Role')->select();
        $this->assign('roles', $roles);
        $this->assign('branch_list', $branch_list);
        $types = D('EventType')->select();
        $this->assign('types', $types);
        $this->assign('p', I('p', 1));
        $this->display();
    }

    public function eventManage()
    {
        $id = I('id');
        if ($id) {
            $map['Event.id'] = $id;
            $map['Event.status'] = array('gt', -1);
            $detail = D('EventView')->where($map)->find();
            if ($detail) {
//                $detail['role_limit'] = explode(",",$detail['role_limit']);

                $this->assign('detail', $detail);


                $keyword = I('keyword');
                $sign_status = I('sign_status', -1);
                $sign_out_status = I('sign_out_status', -1);
                $search = "EventAttend.status>0 and EventAttend.event_id=$id ";

                $searchMap = array(
                    'id' => $id,
                    'keyword' => $keyword,
                    'sign_status' => $sign_status,
                    'sign_out_status' => $sign_out_status
                );

//                exit(to_json_string($searchMap));

                if ($keyword) {
                    $search = $search . " and EventAttend.name like '%$keyword%'";
                }
                if ($sign_status > -1) {
                    $search = $search . " and EventAttend.sign_status=$sign_status";
                }
                if ($sign_out_status > -1) {
                    $search = $search . " and EventAttend.sign_out_status=$sign_out_status";
                }

                $page = D("EventAttendView")->findPage($search, 15, "EventAttend.attend_time desc");
                $this->assign('page', $page);
                $this->assign('search', $searchMap);
            }


        }

        $roles = D('Role')->select();
        $this->assign('roles', $roles);

        $this->assign('p', I('p', 1));
        $this->display();
    }

    public function ajaxChangeEventStatus()
    {
        $id = I('id');
        $item = D('Event')->find($id);
        if ($item) {
            $status = $item['status'];
            if ($status == -1) {
                ajaxMsg(1, '该活动已经删除了');
            }
            if ($status == 1) {
                $save['status'] = 0;
            } else {
                $save['status'] = 1;
            }
            D('Event')->where(array('id' => $id))->save($save);
            ajaxMsg(0, '保存成功');
        } else {
            ajaxMsg(1, '该活动已经删除了');
        }
    }

    public function ajaxSaveEvent()
    {
        $id = I('id');
        $title = I('title');
        $cover = I('img_url');
        $address = I('address');
        $name = I('name');
        $mobile = I('mobile');
        $type_id = I('type_id');
        $role_limit = I('role_limit');
        $people_limit = I('people_limit', 0);
        $entry_start_time = I('entry_start_time');
        $entry_end_time = I('entry_end_time');
        $start_time = I('start_time');
        $unit_name = I('unit_name');
        $end_time = I('end_time');
        $content = $_POST['content'];
        $status = I('status', 1);
        $branch_id = I('branch_id')?I('branch_id'):0;
        if (!$title) {
            ajaxMsg(1, "请先填写标题信息");
        }
        if (!$cover) {
            ajaxMsg(1, "请先上传封面");
        }
        if (!$start_time) {
            ajaxMsg(1, "请选择活动开始日期");
        }
        if (!$end_time) {
            ajaxMsg(1, "请选择活动结束日期");
        }
        if (!$entry_start_time) {
            ajaxMsg(1, "请选择报名开始日期");
        }
        if (!$entry_end_time) {
            ajaxMsg(1, "请选择报名结束日期");
        }

        if (!$mobile || !$name) {
            ajaxMsg(1, "请先填写联系人和联系电话");
        }
//        $type = D('EventType')->find($type_id);
//        if(!$type){
//            ajaxMsg(1,"请先选择活动类型");
//        }
        if (!$content) {
            ajaxMsg(1, "请先填写活动内容");
        }
//        ajaxMsg(1,to_json_string($_POST));'role_limit'=>$role_limit?implode(",",$role_limit):null,
        date_default_timezone_set('PRC');
        $time1 = date_create($entry_start_time);
        $time1 = date_format($time1, 'Y-m-d');
        $time2 = date_create($entry_end_time);
        $time2 = date_format($time2, 'Y-m-d');
        $time3 = date_create($start_time);
        $time3 = date_format($time3, 'Y-m-d');
        $time4 = date_create($end_time);
        $time4 = date_format($time4, 'Y-m-d');
		
//		ajaxMsg(1, $start_time);
        $array = array(
            'title' => $title,
            'cover' => $cover,
            'people_limit' => $people_limit,
            'entry_start_time' => strtotime($time1),
            'entry_end_time' => strtotime($time2),
            'start_time' => strtotime($time3),
            'end_time' => strtotime($time4),
            'unit_name' => $unit_name,
            'address' => $address,
            'name' => $name,
            'mobile' => $mobile,
            'type_id' => $type_id,
            'content' => $content,
           
        );

     if(!$role_limit){
         ajaxMsg(1, '查看限制至少选择1个');
     }

     $sizeRole = sizeof($role_limit);
     if ($sizeRole < 1) {
         ajaxMsg(1, '查看限制至少选择1个');
     }

        if ($id) {//编辑
            $item = D('Event')->find($id);
            $oldStatus = $item['status'];
            if ($oldStatus < 0) {
                ajaxMsg(1, '该活动已经删除了');
            }
            $array['status'] = $status;
            D('Event')->where(array('id' => $id))->save($array);
         D('EventRole')->where(array('event_id' => $id))->delete();
         foreach ($role_limit as $item) {
             D('EventRole')->add(array('event_id' => $id, 'role_id' => $item,'branch_id'=>$branch_id));
         }
            ajaxMsg(0, '保存成功');
        } else {
            $array['uid'] = admin_uid();
            $array['status'] = $status;
            $array['create_time'] = time();
            $array = set_save_auth($array);
            $id = D('Event')->add($array);

         foreach ($role_limit as $item) {
             D('EventRole')->add(array('event_id' => $id, 'role_id' => $item,'branch_id'=>$branch_id));
         }

            ajaxMsg(0, '保存成功');
        }
    }

    public function ajaxDelEvent()
    {
        $id = I('id');
        D('Event')->where(array('id' => $id))->save(array('status' => -1));
        ajaxMsg(0, '删除成功');

    }
    public function ajaxDelAttend()
    {
        $id = I('id');
        $attend = D('EventAttend')->find($id);
        if ($attend) {
            if ($attend['status'] == 1) {//如果为报名状态
                $eventId = $attend['event_id'];
                $detail = D('Event')->where(array('id' => $eventId))->find();
                if ($detail['status'] > -1) {
                    D('Event')->where(array('id' => $eventId))->setDec("attend_count");
                    D('EventAttend')->where("id=$id")->save(array('status' => -1, 'sign_status' => 0, 'sign_out_status' => 0, 'sign_time' => null, 'sign_out_time' => null));
                    ajaxMsg(0, '删除成功');
                } else {
                    ajaxMsg(1, '活动已经取消了');
                }
            } else {
                ajaxMsg(0, '删除成功');
            }

        }

        ajaxMsg(0, '删除成功');

    }


    public function exportExcel()
    {

        vendor("PHPExcel.PHPExcel");//如果这里提示类不存在，肯定是你文件夹名字不对。
        $objPHPExcel = new \PHPExcel();//这里要注意‘\’ 要有这个。因为版本是3.1.2了。
        $objWriter = new \PHPExcel_Writer_Excel5($objPHPExcel);//设置保存版本格式
        //设置表头

        $id = I('id');
        $uid = admin_uid();//"uid=$uid and id=$id"
        $event = D('Event')->where(array('id' => $id))->find();


        $eventId = $event['id'];
        $keyword = I('keyword');
        $sign_status = I('sign_status', -1);
        $sign_out_status = I('sign_out_status', -1);
        $search = "event_id=$eventId ";


        if ($keyword) {
            $search = $search . " and EventAttend.name like '%$keyword%'";
        }
        if ($sign_status > -1) {
            $search = $search . " and EventAttend.sign_status=$sign_status";
        }
        if ($sign_out_status > -1) {
            $search = $search . " and EventAttend.sign_out_status=$sign_out_status";
        }


        $attends = D('EventAttendView')->where($search)->select();



        $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
//        $objPHPExcel->getActiveSheet()->getColumnDimension('K')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
        $objPHPExcel->getActiveSheet()->setCellValue("A1", '姓名');
        $objPHPExcel->getActiveSheet()->setCellValue("B1", '性别');
        $objPHPExcel->getActiveSheet()->setCellValue("C1", '电话');
//        $objPHPExcel->getActiveSheet()->setCellValue("D1", '生日');
//        $objPHPExcel->getActiveSheet()->setCellValue("E1", '职务');
//        $objPHPExcel->getActiveSheet()->setCellValue("F1", '单位');
//        $objPHPExcel->getActiveSheet()->setCellValue("I1", '备注');
        $objPHPExcel->getActiveSheet()->setCellValue("D1", '签到');
        $objPHPExcel->getActiveSheet()->setCellValue("E1", '签退');
        $objPHPExcel->getActiveSheet()->setCellValue("F1", '报名时间');

        foreach ($attends as $i => $attend) {
            $index = $i + 2;
            $objPHPExcel->getActiveSheet()->setCellValue("A" . $index, $attend['attend_name']);
            $objPHPExcel->getActiveSheet()->setCellValue("B" . $index, $attend['user_gender'] == 1 ? "男" : "女");
            $objPHPExcel->getActiveSheet()->setCellValue("C" . $index, $attend['attend_mobile']);
//            $objPHPExcel->getActiveSheet()->setCellValue("D".$index, $attend['birthday']);
//            $objPHPExcel->getActiveSheet()->setCellValue("E".$index, $attend['position']);
//            $objPHPExcel->getActiveSheet()->setCellValue("F".$index, $attend['work_unit']);
//            $objPHPExcel->getActiveSheet()->setCellValue("I".$index, $attend['remark']);
            $objPHPExcel->getActiveSheet()->setCellValue("D" . $index, $attend['sign_status'] == 1 ? "已签到" : "--");
            $objPHPExcel->getActiveSheet()->setCellValue("E" . $index, $attend['sign_out_status'] == 1 ? "已签退" : "--");
            $objPHPExcel->getActiveSheet()->setCellValue("F" . $index, date('Y年m月d日 h:i', $attend['attend_time']));


        }


        //接下来当然是下载这个表格了，在浏览器输出就好了
        header("Pragma: public");
        header("Expires: 0");
        header("Cache-Control:must-revalidate, post-check=0, pre-check=0");
        header("Content-Type:application/force-download");
        header("Content-Type:application/vnd.ms-execl");
        header("Content-Type:application/octet-stream");
        header("Content-Type:application/download");;
        header('Content-Disposition:attachment;filename=' . $event['title'] . Date('Y-m-d') . '.xls');
        header("Content-Transfer-Encoding:binary");
        $objWriter->save('.xls');
        $objWriter->save('php://output');
    }





}